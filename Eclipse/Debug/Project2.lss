
Project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000023dc  00002470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  0080006a  0080006a  0000247a  2**0
                  ALLOC
  3 .stab         00001a88  00000000  00000000  0000247c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a2e  00000000  00000000  00003f04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004932  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004a72  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004be2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000682b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007716  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000084c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008624  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000088b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000907f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 d4 05 	jmp	0xba8	; 0xba8 <__vector_1>
       8:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__vector_2>
       c:	0c 94 27 06 	jmp	0xc4e	; 0xc4e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ed       	ldi	r30, 0xDC	; 220
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 37       	cpi	r26, 0x78	; 120
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8d 11 	call	0x231a	; 0x231a <main>
      8a:	0c 94 ec 11 	jmp	0x23d8	; 0x23d8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b5 11 	jmp	0x236a	; 0x236a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d1 11 	jmp	0x23a2	; 0x23a2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c1 11 	jmp	0x2382	; 0x2382 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 dd 11 	jmp	0x23ba	; 0x23ba <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c1 11 	jmp	0x2382	; 0x2382 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 dd 11 	jmp	0x23ba	; 0x23ba <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b5 11 	jmp	0x236a	; 0x236a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d1 11 	jmp	0x23a2	; 0x23a2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c1 11 	jmp	0x2382	; 0x2382 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 dd 11 	jmp	0x23ba	; 0x23ba <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c1 11 	jmp	0x2382	; 0x2382 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 dd 11 	jmp	0x23ba	; 0x23ba <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c1 11 	jmp	0x2382	; 0x2382 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 dd 11 	jmp	0x23ba	; 0x23ba <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c5 11 	jmp	0x238a	; 0x238a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e1 11 	jmp	0x23c2	; 0x23c2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <__vector_7>:
void Toggle_LED(void); //Function to toggle led when count mode change


//Interrupt Service Routine for Timer1 Compare Match A
ISR(TIMER1_COMPA_vect)
{
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	2f 93       	push	r18
     b52:	3f 93       	push	r19
     b54:	4f 93       	push	r20
     b56:	5f 93       	push	r21
     b58:	6f 93       	push	r22
     b5a:	7f 93       	push	r23
     b5c:	8f 93       	push	r24
     b5e:	9f 93       	push	r25
     b60:	af 93       	push	r26
     b62:	bf 93       	push	r27
     b64:	ef 93       	push	r30
     b66:	ff 93       	push	r31
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	// Check the state of the 'toggle' variable to determine which counting function to call
	if(toggle == 1)
     b70:	80 91 68 00 	lds	r24, 0x0068
     b74:	81 30       	cpi	r24, 0x01	; 1
     b76:	19 f4       	brne	.+6      	; 0xb7e <__vector_7+0x38>
	{
		Count_up();
     b78:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <Count_up>
     b7c:	02 c0       	rjmp	.+4      	; 0xb82 <__vector_7+0x3c>
	}
	else
	{
		Count_down();
     b7e:	0e 94 4f 10 	call	0x209e	; 0x209e <Count_down>
	}
}
     b82:	cf 91       	pop	r28
     b84:	df 91       	pop	r29
     b86:	ff 91       	pop	r31
     b88:	ef 91       	pop	r30
     b8a:	bf 91       	pop	r27
     b8c:	af 91       	pop	r26
     b8e:	9f 91       	pop	r25
     b90:	8f 91       	pop	r24
     b92:	7f 91       	pop	r23
     b94:	6f 91       	pop	r22
     b96:	5f 91       	pop	r21
     b98:	4f 91       	pop	r20
     b9a:	3f 91       	pop	r19
     b9c:	2f 91       	pop	r18
     b9e:	0f 90       	pop	r0
     ba0:	0f be       	out	0x3f, r0	; 63
     ba2:	0f 90       	pop	r0
     ba4:	1f 90       	pop	r1
     ba6:	18 95       	reti

00000ba8 <__vector_1>:


//Interrupt Service Routine for External Interrupt 0 (INT0)
ISR(INT0_vect)
{
     ba8:	1f 92       	push	r1
     baa:	0f 92       	push	r0
     bac:	0f b6       	in	r0, 0x3f	; 63
     bae:	0f 92       	push	r0
     bb0:	11 24       	eor	r1, r1
     bb2:	ef 93       	push	r30
     bb4:	ff 93       	push	r31
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
	TCNT1=0; //Reset the Timer/Counter1 value to 0
     bbe:	ec e4       	ldi	r30, 0x4C	; 76
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	11 82       	std	Z+1, r1	; 0x01
     bc4:	10 82       	st	Z, r1
	// Reset the units and tens place of seconds, minutes, and hours to 0
	seconds_unit=0;
     bc6:	10 92 6a 00 	sts	0x006A, r1
	seconds_ten=0;
     bca:	10 92 6b 00 	sts	0x006B, r1
	minutes_unit=0;
     bce:	10 92 6c 00 	sts	0x006C, r1
	minutes_ten=0;
     bd2:	10 92 6d 00 	sts	0x006D, r1
	hours_unit=0;
     bd6:	10 92 6e 00 	sts	0x006E, r1
	hours_ten=0;
     bda:	10 92 6f 00 	sts	0x006F, r1
}
     bde:	cf 91       	pop	r28
     be0:	df 91       	pop	r29
     be2:	ff 91       	pop	r31
     be4:	ef 91       	pop	r30
     be6:	0f 90       	pop	r0
     be8:	0f be       	out	0x3f, r0	; 63
     bea:	0f 90       	pop	r0
     bec:	1f 90       	pop	r1
     bee:	18 95       	reti

00000bf0 <__vector_2>:


// Interrupt Service Routine for External Interrupt 1 (INT1)
ISR(INT1_vect)
{
     bf0:	1f 92       	push	r1
     bf2:	0f 92       	push	r0
     bf4:	0f b6       	in	r0, 0x3f	; 63
     bf6:	0f 92       	push	r0
     bf8:	11 24       	eor	r1, r1
     bfa:	8f 93       	push	r24
     bfc:	af 93       	push	r26
     bfe:	bf 93       	push	r27
     c00:	ef 93       	push	r30
     c02:	ff 93       	push	r31
     c04:	df 93       	push	r29
     c06:	cf 93       	push	r28
     c08:	cd b7       	in	r28, 0x3d	; 61
     c0a:	de b7       	in	r29, 0x3e	; 62
	// Stop Timer/Counter1 by clearing the prescaler bits
	TCCR1B &=~ (1<<CS10);
     c0c:	ae e4       	ldi	r26, 0x4E	; 78
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	ee e4       	ldi	r30, 0x4E	; 78
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	8e 7f       	andi	r24, 0xFE	; 254
     c18:	8c 93       	st	X, r24
	TCCR1B &=~ (1<<CS11);
     c1a:	ae e4       	ldi	r26, 0x4E	; 78
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	ee e4       	ldi	r30, 0x4E	; 78
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
     c24:	8d 7f       	andi	r24, 0xFD	; 253
     c26:	8c 93       	st	X, r24
	TCCR1B &=~ (1<<CS12);
     c28:	ae e4       	ldi	r26, 0x4E	; 78
     c2a:	b0 e0       	ldi	r27, 0x00	; 0
     c2c:	ee e4       	ldi	r30, 0x4E	; 78
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	80 81       	ld	r24, Z
     c32:	8b 7f       	andi	r24, 0xFB	; 251
     c34:	8c 93       	st	X, r24
}
     c36:	cf 91       	pop	r28
     c38:	df 91       	pop	r29
     c3a:	ff 91       	pop	r31
     c3c:	ef 91       	pop	r30
     c3e:	bf 91       	pop	r27
     c40:	af 91       	pop	r26
     c42:	8f 91       	pop	r24
     c44:	0f 90       	pop	r0
     c46:	0f be       	out	0x3f, r0	; 63
     c48:	0f 90       	pop	r0
     c4a:	1f 90       	pop	r1
     c4c:	18 95       	reti

00000c4e <__vector_3>:


// Interrupt Service Routine for External Interrupt 2 (INT2)
ISR(INT2_vect)
{
     c4e:	1f 92       	push	r1
     c50:	0f 92       	push	r0
     c52:	0f b6       	in	r0, 0x3f	; 63
     c54:	0f 92       	push	r0
     c56:	11 24       	eor	r1, r1
     c58:	8f 93       	push	r24
     c5a:	af 93       	push	r26
     c5c:	bf 93       	push	r27
     c5e:	ef 93       	push	r30
     c60:	ff 93       	push	r31
     c62:	df 93       	push	r29
     c64:	cf 93       	push	r28
     c66:	cd b7       	in	r28, 0x3d	; 61
     c68:	de b7       	in	r29, 0x3e	; 62
	TCCR1B |= (1<<CS12) | (1<<CS10); // Start or resume Timer/Counter1 by setting the prescaler bits
     c6a:	ae e4       	ldi	r26, 0x4E	; 78
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	ee e4       	ldi	r30, 0x4E	; 78
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	85 60       	ori	r24, 0x05	; 5
     c76:	8c 93       	st	X, r24
}
     c78:	cf 91       	pop	r28
     c7a:	df 91       	pop	r29
     c7c:	ff 91       	pop	r31
     c7e:	ef 91       	pop	r30
     c80:	bf 91       	pop	r27
     c82:	af 91       	pop	r26
     c84:	8f 91       	pop	r24
     c86:	0f 90       	pop	r0
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	0f 90       	pop	r0
     c8c:	1f 90       	pop	r1
     c8e:	18 95       	reti

00000c90 <Display>:


void Display(void)
{
     c90:	0f 93       	push	r16
     c92:	1f 93       	push	r17
     c94:	df 93       	push	r29
     c96:	cf 93       	push	r28
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
     c9c:	c4 55       	subi	r28, 0x54	; 84
     c9e:	d0 40       	sbci	r29, 0x00	; 0
     ca0:	0f b6       	in	r0, 0x3f	; 63
     ca2:	f8 94       	cli
     ca4:	de bf       	out	0x3e, r29	; 62
     ca6:	0f be       	out	0x3f, r0	; 63
     ca8:	cd bf       	out	0x3d, r28	; 61
	//Display Seconds_unit
	PORTA=0X20;
     caa:	eb e3       	ldi	r30, 0x3B	; 59
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 e2       	ldi	r24, 0x20	; 32
     cb0:	80 83       	st	Z, r24
	PORTC =(PORTC & 0XF0) | (seconds_unit & 0X0F);
     cb2:	a5 e3       	ldi	r26, 0x35	; 53
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	e5 e3       	ldi	r30, 0x35	; 53
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	98 2f       	mov	r25, r24
     cbe:	90 7f       	andi	r25, 0xF0	; 240
     cc0:	80 91 6a 00 	lds	r24, 0x006A
     cc4:	8f 70       	andi	r24, 0x0F	; 15
     cc6:	89 2b       	or	r24, r25
     cc8:	8c 93       	st	X, r24
     cca:	fe 01       	movw	r30, r28
     ccc:	ef 5a       	subi	r30, 0xAF	; 175
     cce:	ff 4f       	sbci	r31, 0xFF	; 255
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	a0 e0       	ldi	r26, 0x00	; 0
     cd6:	b0 e4       	ldi	r27, 0x40	; 64
     cd8:	80 83       	st	Z, r24
     cda:	91 83       	std	Z+1, r25	; 0x01
     cdc:	a2 83       	std	Z+2, r26	; 0x02
     cde:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ce0:	8e 01       	movw	r16, r28
     ce2:	03 5b       	subi	r16, 0xB3	; 179
     ce4:	1f 4f       	sbci	r17, 0xFF	; 255
     ce6:	fe 01       	movw	r30, r28
     ce8:	ef 5a       	subi	r30, 0xAF	; 175
     cea:	ff 4f       	sbci	r31, 0xFF	; 255
     cec:	60 81       	ld	r22, Z
     cee:	71 81       	ldd	r23, Z+1	; 0x01
     cf0:	82 81       	ldd	r24, Z+2	; 0x02
     cf2:	93 81       	ldd	r25, Z+3	; 0x03
     cf4:	20 e0       	ldi	r18, 0x00	; 0
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	4a e7       	ldi	r20, 0x7A	; 122
     cfa:	55 e4       	ldi	r21, 0x45	; 69
     cfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d00:	dc 01       	movw	r26, r24
     d02:	cb 01       	movw	r24, r22
     d04:	f8 01       	movw	r30, r16
     d06:	80 83       	st	Z, r24
     d08:	91 83       	std	Z+1, r25	; 0x01
     d0a:	a2 83       	std	Z+2, r26	; 0x02
     d0c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d0e:	fe 01       	movw	r30, r28
     d10:	e3 5b       	subi	r30, 0xB3	; 179
     d12:	ff 4f       	sbci	r31, 0xFF	; 255
     d14:	60 81       	ld	r22, Z
     d16:	71 81       	ldd	r23, Z+1	; 0x01
     d18:	82 81       	ldd	r24, Z+2	; 0x02
     d1a:	93 81       	ldd	r25, Z+3	; 0x03
     d1c:	20 e0       	ldi	r18, 0x00	; 0
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	40 e8       	ldi	r20, 0x80	; 128
     d22:	5f e3       	ldi	r21, 0x3F	; 63
     d24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d28:	88 23       	and	r24, r24
     d2a:	44 f4       	brge	.+16     	; 0xd3c <Display+0xac>
		__ticks = 1;
     d2c:	fe 01       	movw	r30, r28
     d2e:	e5 5b       	subi	r30, 0xB5	; 181
     d30:	ff 4f       	sbci	r31, 0xFF	; 255
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	91 83       	std	Z+1, r25	; 0x01
     d38:	80 83       	st	Z, r24
     d3a:	64 c0       	rjmp	.+200    	; 0xe04 <Display+0x174>
	else if (__tmp > 65535)
     d3c:	fe 01       	movw	r30, r28
     d3e:	e3 5b       	subi	r30, 0xB3	; 179
     d40:	ff 4f       	sbci	r31, 0xFF	; 255
     d42:	60 81       	ld	r22, Z
     d44:	71 81       	ldd	r23, Z+1	; 0x01
     d46:	82 81       	ldd	r24, Z+2	; 0x02
     d48:	93 81       	ldd	r25, Z+3	; 0x03
     d4a:	20 e0       	ldi	r18, 0x00	; 0
     d4c:	3f ef       	ldi	r19, 0xFF	; 255
     d4e:	4f e7       	ldi	r20, 0x7F	; 127
     d50:	57 e4       	ldi	r21, 0x47	; 71
     d52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d56:	18 16       	cp	r1, r24
     d58:	0c f0       	brlt	.+2      	; 0xd5c <Display+0xcc>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <Display+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d5c:	fe 01       	movw	r30, r28
     d5e:	ef 5a       	subi	r30, 0xAF	; 175
     d60:	ff 4f       	sbci	r31, 0xFF	; 255
     d62:	60 81       	ld	r22, Z
     d64:	71 81       	ldd	r23, Z+1	; 0x01
     d66:	82 81       	ldd	r24, Z+2	; 0x02
     d68:	93 81       	ldd	r25, Z+3	; 0x03
     d6a:	20 e0       	ldi	r18, 0x00	; 0
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	40 e2       	ldi	r20, 0x20	; 32
     d70:	51 e4       	ldi	r21, 0x41	; 65
     d72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d76:	dc 01       	movw	r26, r24
     d78:	cb 01       	movw	r24, r22
     d7a:	8e 01       	movw	r16, r28
     d7c:	05 5b       	subi	r16, 0xB5	; 181
     d7e:	1f 4f       	sbci	r17, 0xFF	; 255
     d80:	bc 01       	movw	r22, r24
     d82:	cd 01       	movw	r24, r26
     d84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d88:	dc 01       	movw	r26, r24
     d8a:	cb 01       	movw	r24, r22
     d8c:	f8 01       	movw	r30, r16
     d8e:	91 83       	std	Z+1, r25	; 0x01
     d90:	80 83       	st	Z, r24
     d92:	1f c0       	rjmp	.+62     	; 0xdd2 <Display+0x142>
     d94:	fe 01       	movw	r30, r28
     d96:	e7 5b       	subi	r30, 0xB7	; 183
     d98:	ff 4f       	sbci	r31, 0xFF	; 255
     d9a:	80 e9       	ldi	r24, 0x90	; 144
     d9c:	91 e0       	ldi	r25, 0x01	; 1
     d9e:	91 83       	std	Z+1, r25	; 0x01
     da0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     da2:	fe 01       	movw	r30, r28
     da4:	e7 5b       	subi	r30, 0xB7	; 183
     da6:	ff 4f       	sbci	r31, 0xFF	; 255
     da8:	80 81       	ld	r24, Z
     daa:	91 81       	ldd	r25, Z+1	; 0x01
     dac:	01 97       	sbiw	r24, 0x01	; 1
     dae:	f1 f7       	brne	.-4      	; 0xdac <Display+0x11c>
     db0:	fe 01       	movw	r30, r28
     db2:	e7 5b       	subi	r30, 0xB7	; 183
     db4:	ff 4f       	sbci	r31, 0xFF	; 255
     db6:	91 83       	std	Z+1, r25	; 0x01
     db8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dba:	de 01       	movw	r26, r28
     dbc:	a5 5b       	subi	r26, 0xB5	; 181
     dbe:	bf 4f       	sbci	r27, 0xFF	; 255
     dc0:	fe 01       	movw	r30, r28
     dc2:	e5 5b       	subi	r30, 0xB5	; 181
     dc4:	ff 4f       	sbci	r31, 0xFF	; 255
     dc6:	80 81       	ld	r24, Z
     dc8:	91 81       	ldd	r25, Z+1	; 0x01
     dca:	01 97       	sbiw	r24, 0x01	; 1
     dcc:	11 96       	adiw	r26, 0x01	; 1
     dce:	9c 93       	st	X, r25
     dd0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dd2:	fe 01       	movw	r30, r28
     dd4:	e5 5b       	subi	r30, 0xB5	; 181
     dd6:	ff 4f       	sbci	r31, 0xFF	; 255
     dd8:	80 81       	ld	r24, Z
     dda:	91 81       	ldd	r25, Z+1	; 0x01
     ddc:	00 97       	sbiw	r24, 0x00	; 0
     dde:	d1 f6       	brne	.-76     	; 0xd94 <Display+0x104>
     de0:	27 c0       	rjmp	.+78     	; 0xe30 <Display+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     de2:	8e 01       	movw	r16, r28
     de4:	05 5b       	subi	r16, 0xB5	; 181
     de6:	1f 4f       	sbci	r17, 0xFF	; 255
     de8:	fe 01       	movw	r30, r28
     dea:	e3 5b       	subi	r30, 0xB3	; 179
     dec:	ff 4f       	sbci	r31, 0xFF	; 255
     dee:	60 81       	ld	r22, Z
     df0:	71 81       	ldd	r23, Z+1	; 0x01
     df2:	82 81       	ldd	r24, Z+2	; 0x02
     df4:	93 81       	ldd	r25, Z+3	; 0x03
     df6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dfa:	dc 01       	movw	r26, r24
     dfc:	cb 01       	movw	r24, r22
     dfe:	f8 01       	movw	r30, r16
     e00:	91 83       	std	Z+1, r25	; 0x01
     e02:	80 83       	st	Z, r24
     e04:	de 01       	movw	r26, r28
     e06:	a9 5b       	subi	r26, 0xB9	; 185
     e08:	bf 4f       	sbci	r27, 0xFF	; 255
     e0a:	fe 01       	movw	r30, r28
     e0c:	e5 5b       	subi	r30, 0xB5	; 181
     e0e:	ff 4f       	sbci	r31, 0xFF	; 255
     e10:	80 81       	ld	r24, Z
     e12:	91 81       	ldd	r25, Z+1	; 0x01
     e14:	8d 93       	st	X+, r24
     e16:	9c 93       	st	X, r25
     e18:	fe 01       	movw	r30, r28
     e1a:	e9 5b       	subi	r30, 0xB9	; 185
     e1c:	ff 4f       	sbci	r31, 0xFF	; 255
     e1e:	80 81       	ld	r24, Z
     e20:	91 81       	ldd	r25, Z+1	; 0x01
     e22:	01 97       	sbiw	r24, 0x01	; 1
     e24:	f1 f7       	brne	.-4      	; 0xe22 <Display+0x192>
     e26:	fe 01       	movw	r30, r28
     e28:	e9 5b       	subi	r30, 0xB9	; 185
     e2a:	ff 4f       	sbci	r31, 0xFF	; 255
     e2c:	91 83       	std	Z+1, r25	; 0x01
     e2e:	80 83       	st	Z, r24
	_delay_ms(2);
	//Display Seconds_ten
	PORTA=0X10;
     e30:	eb e3       	ldi	r30, 0x3B	; 59
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 e1       	ldi	r24, 0x10	; 16
     e36:	80 83       	st	Z, r24
	PORTC =(PORTC & 0XF0) | (seconds_ten & 0X0F);
     e38:	a5 e3       	ldi	r26, 0x35	; 53
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e5 e3       	ldi	r30, 0x35	; 53
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	98 2f       	mov	r25, r24
     e44:	90 7f       	andi	r25, 0xF0	; 240
     e46:	80 91 6b 00 	lds	r24, 0x006B
     e4a:	8f 70       	andi	r24, 0x0F	; 15
     e4c:	89 2b       	or	r24, r25
     e4e:	8c 93       	st	X, r24
     e50:	fe 01       	movw	r30, r28
     e52:	ed 5b       	subi	r30, 0xBD	; 189
     e54:	ff 4f       	sbci	r31, 0xFF	; 255
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	a0 e0       	ldi	r26, 0x00	; 0
     e5c:	b0 e4       	ldi	r27, 0x40	; 64
     e5e:	80 83       	st	Z, r24
     e60:	91 83       	std	Z+1, r25	; 0x01
     e62:	a2 83       	std	Z+2, r26	; 0x02
     e64:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e66:	8e 01       	movw	r16, r28
     e68:	01 5c       	subi	r16, 0xC1	; 193
     e6a:	1f 4f       	sbci	r17, 0xFF	; 255
     e6c:	fe 01       	movw	r30, r28
     e6e:	ed 5b       	subi	r30, 0xBD	; 189
     e70:	ff 4f       	sbci	r31, 0xFF	; 255
     e72:	60 81       	ld	r22, Z
     e74:	71 81       	ldd	r23, Z+1	; 0x01
     e76:	82 81       	ldd	r24, Z+2	; 0x02
     e78:	93 81       	ldd	r25, Z+3	; 0x03
     e7a:	20 e0       	ldi	r18, 0x00	; 0
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	4a e7       	ldi	r20, 0x7A	; 122
     e80:	55 e4       	ldi	r21, 0x45	; 69
     e82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e86:	dc 01       	movw	r26, r24
     e88:	cb 01       	movw	r24, r22
     e8a:	f8 01       	movw	r30, r16
     e8c:	80 83       	st	Z, r24
     e8e:	91 83       	std	Z+1, r25	; 0x01
     e90:	a2 83       	std	Z+2, r26	; 0x02
     e92:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e94:	fe 01       	movw	r30, r28
     e96:	ff 96       	adiw	r30, 0x3f	; 63
     e98:	60 81       	ld	r22, Z
     e9a:	71 81       	ldd	r23, Z+1	; 0x01
     e9c:	82 81       	ldd	r24, Z+2	; 0x02
     e9e:	93 81       	ldd	r25, Z+3	; 0x03
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	40 e8       	ldi	r20, 0x80	; 128
     ea6:	5f e3       	ldi	r21, 0x3F	; 63
     ea8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     eac:	88 23       	and	r24, r24
     eae:	2c f4       	brge	.+10     	; 0xeba <Display+0x22a>
		__ticks = 1;
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	9e af       	std	Y+62, r25	; 0x3e
     eb6:	8d af       	std	Y+61, r24	; 0x3d
     eb8:	46 c0       	rjmp	.+140    	; 0xf46 <Display+0x2b6>
	else if (__tmp > 65535)
     eba:	fe 01       	movw	r30, r28
     ebc:	ff 96       	adiw	r30, 0x3f	; 63
     ebe:	60 81       	ld	r22, Z
     ec0:	71 81       	ldd	r23, Z+1	; 0x01
     ec2:	82 81       	ldd	r24, Z+2	; 0x02
     ec4:	93 81       	ldd	r25, Z+3	; 0x03
     ec6:	20 e0       	ldi	r18, 0x00	; 0
     ec8:	3f ef       	ldi	r19, 0xFF	; 255
     eca:	4f e7       	ldi	r20, 0x7F	; 127
     ecc:	57 e4       	ldi	r21, 0x47	; 71
     ece:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ed2:	18 16       	cp	r1, r24
     ed4:	64 f5       	brge	.+88     	; 0xf2e <Display+0x29e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ed6:	fe 01       	movw	r30, r28
     ed8:	ed 5b       	subi	r30, 0xBD	; 189
     eda:	ff 4f       	sbci	r31, 0xFF	; 255
     edc:	60 81       	ld	r22, Z
     ede:	71 81       	ldd	r23, Z+1	; 0x01
     ee0:	82 81       	ldd	r24, Z+2	; 0x02
     ee2:	93 81       	ldd	r25, Z+3	; 0x03
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	40 e2       	ldi	r20, 0x20	; 32
     eea:	51 e4       	ldi	r21, 0x41	; 65
     eec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ef0:	dc 01       	movw	r26, r24
     ef2:	cb 01       	movw	r24, r22
     ef4:	bc 01       	movw	r22, r24
     ef6:	cd 01       	movw	r24, r26
     ef8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     efc:	dc 01       	movw	r26, r24
     efe:	cb 01       	movw	r24, r22
     f00:	9e af       	std	Y+62, r25	; 0x3e
     f02:	8d af       	std	Y+61, r24	; 0x3d
     f04:	0f c0       	rjmp	.+30     	; 0xf24 <Display+0x294>
     f06:	80 e9       	ldi	r24, 0x90	; 144
     f08:	91 e0       	ldi	r25, 0x01	; 1
     f0a:	9c af       	std	Y+60, r25	; 0x3c
     f0c:	8b af       	std	Y+59, r24	; 0x3b
     f0e:	8b ad       	ldd	r24, Y+59	; 0x3b
     f10:	9c ad       	ldd	r25, Y+60	; 0x3c
     f12:	01 97       	sbiw	r24, 0x01	; 1
     f14:	f1 f7       	brne	.-4      	; 0xf12 <Display+0x282>
     f16:	9c af       	std	Y+60, r25	; 0x3c
     f18:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f1a:	8d ad       	ldd	r24, Y+61	; 0x3d
     f1c:	9e ad       	ldd	r25, Y+62	; 0x3e
     f1e:	01 97       	sbiw	r24, 0x01	; 1
     f20:	9e af       	std	Y+62, r25	; 0x3e
     f22:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f24:	8d ad       	ldd	r24, Y+61	; 0x3d
     f26:	9e ad       	ldd	r25, Y+62	; 0x3e
     f28:	00 97       	sbiw	r24, 0x00	; 0
     f2a:	69 f7       	brne	.-38     	; 0xf06 <Display+0x276>
     f2c:	16 c0       	rjmp	.+44     	; 0xf5a <Display+0x2ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f2e:	fe 01       	movw	r30, r28
     f30:	ff 96       	adiw	r30, 0x3f	; 63
     f32:	60 81       	ld	r22, Z
     f34:	71 81       	ldd	r23, Z+1	; 0x01
     f36:	82 81       	ldd	r24, Z+2	; 0x02
     f38:	93 81       	ldd	r25, Z+3	; 0x03
     f3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f3e:	dc 01       	movw	r26, r24
     f40:	cb 01       	movw	r24, r22
     f42:	9e af       	std	Y+62, r25	; 0x3e
     f44:	8d af       	std	Y+61, r24	; 0x3d
     f46:	8d ad       	ldd	r24, Y+61	; 0x3d
     f48:	9e ad       	ldd	r25, Y+62	; 0x3e
     f4a:	9a af       	std	Y+58, r25	; 0x3a
     f4c:	89 af       	std	Y+57, r24	; 0x39
     f4e:	89 ad       	ldd	r24, Y+57	; 0x39
     f50:	9a ad       	ldd	r25, Y+58	; 0x3a
     f52:	01 97       	sbiw	r24, 0x01	; 1
     f54:	f1 f7       	brne	.-4      	; 0xf52 <Display+0x2c2>
     f56:	9a af       	std	Y+58, r25	; 0x3a
     f58:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(2);
	//Display Minutes_unit
	PORTA=0X08;
     f5a:	eb e3       	ldi	r30, 0x3B	; 59
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	88 e0       	ldi	r24, 0x08	; 8
     f60:	80 83       	st	Z, r24
	PORTC =(PORTC & 0XF0) | (minutes_unit & 0X0F);
     f62:	a5 e3       	ldi	r26, 0x35	; 53
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e5 e3       	ldi	r30, 0x35	; 53
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	98 2f       	mov	r25, r24
     f6e:	90 7f       	andi	r25, 0xF0	; 240
     f70:	80 91 6c 00 	lds	r24, 0x006C
     f74:	8f 70       	andi	r24, 0x0F	; 15
     f76:	89 2b       	or	r24, r25
     f78:	8c 93       	st	X, r24
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	a0 e0       	ldi	r26, 0x00	; 0
     f80:	b0 e4       	ldi	r27, 0x40	; 64
     f82:	8d ab       	std	Y+53, r24	; 0x35
     f84:	9e ab       	std	Y+54, r25	; 0x36
     f86:	af ab       	std	Y+55, r26	; 0x37
     f88:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f8a:	6d a9       	ldd	r22, Y+53	; 0x35
     f8c:	7e a9       	ldd	r23, Y+54	; 0x36
     f8e:	8f a9       	ldd	r24, Y+55	; 0x37
     f90:	98 ad       	ldd	r25, Y+56	; 0x38
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	4a e7       	ldi	r20, 0x7A	; 122
     f98:	55 e4       	ldi	r21, 0x45	; 69
     f9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f9e:	dc 01       	movw	r26, r24
     fa0:	cb 01       	movw	r24, r22
     fa2:	89 ab       	std	Y+49, r24	; 0x31
     fa4:	9a ab       	std	Y+50, r25	; 0x32
     fa6:	ab ab       	std	Y+51, r26	; 0x33
     fa8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     faa:	69 a9       	ldd	r22, Y+49	; 0x31
     fac:	7a a9       	ldd	r23, Y+50	; 0x32
     fae:	8b a9       	ldd	r24, Y+51	; 0x33
     fb0:	9c a9       	ldd	r25, Y+52	; 0x34
     fb2:	20 e0       	ldi	r18, 0x00	; 0
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	40 e8       	ldi	r20, 0x80	; 128
     fb8:	5f e3       	ldi	r21, 0x3F	; 63
     fba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fbe:	88 23       	and	r24, r24
     fc0:	2c f4       	brge	.+10     	; 0xfcc <Display+0x33c>
		__ticks = 1;
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	98 ab       	std	Y+48, r25	; 0x30
     fc8:	8f a7       	std	Y+47, r24	; 0x2f
     fca:	3f c0       	rjmp	.+126    	; 0x104a <Display+0x3ba>
	else if (__tmp > 65535)
     fcc:	69 a9       	ldd	r22, Y+49	; 0x31
     fce:	7a a9       	ldd	r23, Y+50	; 0x32
     fd0:	8b a9       	ldd	r24, Y+51	; 0x33
     fd2:	9c a9       	ldd	r25, Y+52	; 0x34
     fd4:	20 e0       	ldi	r18, 0x00	; 0
     fd6:	3f ef       	ldi	r19, 0xFF	; 255
     fd8:	4f e7       	ldi	r20, 0x7F	; 127
     fda:	57 e4       	ldi	r21, 0x47	; 71
     fdc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fe0:	18 16       	cp	r1, r24
     fe2:	4c f5       	brge	.+82     	; 0x1036 <Display+0x3a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fe4:	6d a9       	ldd	r22, Y+53	; 0x35
     fe6:	7e a9       	ldd	r23, Y+54	; 0x36
     fe8:	8f a9       	ldd	r24, Y+55	; 0x37
     fea:	98 ad       	ldd	r25, Y+56	; 0x38
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	40 e2       	ldi	r20, 0x20	; 32
     ff2:	51 e4       	ldi	r21, 0x41	; 65
     ff4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ff8:	dc 01       	movw	r26, r24
     ffa:	cb 01       	movw	r24, r22
     ffc:	bc 01       	movw	r22, r24
     ffe:	cd 01       	movw	r24, r26
    1000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1004:	dc 01       	movw	r26, r24
    1006:	cb 01       	movw	r24, r22
    1008:	98 ab       	std	Y+48, r25	; 0x30
    100a:	8f a7       	std	Y+47, r24	; 0x2f
    100c:	0f c0       	rjmp	.+30     	; 0x102c <Display+0x39c>
    100e:	80 e9       	ldi	r24, 0x90	; 144
    1010:	91 e0       	ldi	r25, 0x01	; 1
    1012:	9e a7       	std	Y+46, r25	; 0x2e
    1014:	8d a7       	std	Y+45, r24	; 0x2d
    1016:	8d a5       	ldd	r24, Y+45	; 0x2d
    1018:	9e a5       	ldd	r25, Y+46	; 0x2e
    101a:	01 97       	sbiw	r24, 0x01	; 1
    101c:	f1 f7       	brne	.-4      	; 0x101a <Display+0x38a>
    101e:	9e a7       	std	Y+46, r25	; 0x2e
    1020:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1022:	8f a5       	ldd	r24, Y+47	; 0x2f
    1024:	98 a9       	ldd	r25, Y+48	; 0x30
    1026:	01 97       	sbiw	r24, 0x01	; 1
    1028:	98 ab       	std	Y+48, r25	; 0x30
    102a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    102c:	8f a5       	ldd	r24, Y+47	; 0x2f
    102e:	98 a9       	ldd	r25, Y+48	; 0x30
    1030:	00 97       	sbiw	r24, 0x00	; 0
    1032:	69 f7       	brne	.-38     	; 0x100e <Display+0x37e>
    1034:	14 c0       	rjmp	.+40     	; 0x105e <Display+0x3ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1036:	69 a9       	ldd	r22, Y+49	; 0x31
    1038:	7a a9       	ldd	r23, Y+50	; 0x32
    103a:	8b a9       	ldd	r24, Y+51	; 0x33
    103c:	9c a9       	ldd	r25, Y+52	; 0x34
    103e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1042:	dc 01       	movw	r26, r24
    1044:	cb 01       	movw	r24, r22
    1046:	98 ab       	std	Y+48, r25	; 0x30
    1048:	8f a7       	std	Y+47, r24	; 0x2f
    104a:	8f a5       	ldd	r24, Y+47	; 0x2f
    104c:	98 a9       	ldd	r25, Y+48	; 0x30
    104e:	9c a7       	std	Y+44, r25	; 0x2c
    1050:	8b a7       	std	Y+43, r24	; 0x2b
    1052:	8b a5       	ldd	r24, Y+43	; 0x2b
    1054:	9c a5       	ldd	r25, Y+44	; 0x2c
    1056:	01 97       	sbiw	r24, 0x01	; 1
    1058:	f1 f7       	brne	.-4      	; 0x1056 <Display+0x3c6>
    105a:	9c a7       	std	Y+44, r25	; 0x2c
    105c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	//Display Minutes_ten
	PORTA=0X04;
    105e:	eb e3       	ldi	r30, 0x3B	; 59
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	84 e0       	ldi	r24, 0x04	; 4
    1064:	80 83       	st	Z, r24
	PORTC =(PORTC & 0XF0) | (minutes_ten & 0X0F);
    1066:	a5 e3       	ldi	r26, 0x35	; 53
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	e5 e3       	ldi	r30, 0x35	; 53
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	98 2f       	mov	r25, r24
    1072:	90 7f       	andi	r25, 0xF0	; 240
    1074:	80 91 6d 00 	lds	r24, 0x006D
    1078:	8f 70       	andi	r24, 0x0F	; 15
    107a:	89 2b       	or	r24, r25
    107c:	8c 93       	st	X, r24
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	a0 e0       	ldi	r26, 0x00	; 0
    1084:	b0 e4       	ldi	r27, 0x40	; 64
    1086:	8f a3       	std	Y+39, r24	; 0x27
    1088:	98 a7       	std	Y+40, r25	; 0x28
    108a:	a9 a7       	std	Y+41, r26	; 0x29
    108c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    108e:	6f a1       	ldd	r22, Y+39	; 0x27
    1090:	78 a5       	ldd	r23, Y+40	; 0x28
    1092:	89 a5       	ldd	r24, Y+41	; 0x29
    1094:	9a a5       	ldd	r25, Y+42	; 0x2a
    1096:	20 e0       	ldi	r18, 0x00	; 0
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	4a e7       	ldi	r20, 0x7A	; 122
    109c:	55 e4       	ldi	r21, 0x45	; 69
    109e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10a2:	dc 01       	movw	r26, r24
    10a4:	cb 01       	movw	r24, r22
    10a6:	8b a3       	std	Y+35, r24	; 0x23
    10a8:	9c a3       	std	Y+36, r25	; 0x24
    10aa:	ad a3       	std	Y+37, r26	; 0x25
    10ac:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    10ae:	6b a1       	ldd	r22, Y+35	; 0x23
    10b0:	7c a1       	ldd	r23, Y+36	; 0x24
    10b2:	8d a1       	ldd	r24, Y+37	; 0x25
    10b4:	9e a1       	ldd	r25, Y+38	; 0x26
    10b6:	20 e0       	ldi	r18, 0x00	; 0
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	40 e8       	ldi	r20, 0x80	; 128
    10bc:	5f e3       	ldi	r21, 0x3F	; 63
    10be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10c2:	88 23       	and	r24, r24
    10c4:	2c f4       	brge	.+10     	; 0x10d0 <Display+0x440>
		__ticks = 1;
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	9a a3       	std	Y+34, r25	; 0x22
    10cc:	89 a3       	std	Y+33, r24	; 0x21
    10ce:	3f c0       	rjmp	.+126    	; 0x114e <Display+0x4be>
	else if (__tmp > 65535)
    10d0:	6b a1       	ldd	r22, Y+35	; 0x23
    10d2:	7c a1       	ldd	r23, Y+36	; 0x24
    10d4:	8d a1       	ldd	r24, Y+37	; 0x25
    10d6:	9e a1       	ldd	r25, Y+38	; 0x26
    10d8:	20 e0       	ldi	r18, 0x00	; 0
    10da:	3f ef       	ldi	r19, 0xFF	; 255
    10dc:	4f e7       	ldi	r20, 0x7F	; 127
    10de:	57 e4       	ldi	r21, 0x47	; 71
    10e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10e4:	18 16       	cp	r1, r24
    10e6:	4c f5       	brge	.+82     	; 0x113a <Display+0x4aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10e8:	6f a1       	ldd	r22, Y+39	; 0x27
    10ea:	78 a5       	ldd	r23, Y+40	; 0x28
    10ec:	89 a5       	ldd	r24, Y+41	; 0x29
    10ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    10f0:	20 e0       	ldi	r18, 0x00	; 0
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	40 e2       	ldi	r20, 0x20	; 32
    10f6:	51 e4       	ldi	r21, 0x41	; 65
    10f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10fc:	dc 01       	movw	r26, r24
    10fe:	cb 01       	movw	r24, r22
    1100:	bc 01       	movw	r22, r24
    1102:	cd 01       	movw	r24, r26
    1104:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1108:	dc 01       	movw	r26, r24
    110a:	cb 01       	movw	r24, r22
    110c:	9a a3       	std	Y+34, r25	; 0x22
    110e:	89 a3       	std	Y+33, r24	; 0x21
    1110:	0f c0       	rjmp	.+30     	; 0x1130 <Display+0x4a0>
    1112:	80 e9       	ldi	r24, 0x90	; 144
    1114:	91 e0       	ldi	r25, 0x01	; 1
    1116:	98 a3       	std	Y+32, r25	; 0x20
    1118:	8f 8f       	std	Y+31, r24	; 0x1f
    111a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    111c:	98 a1       	ldd	r25, Y+32	; 0x20
    111e:	01 97       	sbiw	r24, 0x01	; 1
    1120:	f1 f7       	brne	.-4      	; 0x111e <Display+0x48e>
    1122:	98 a3       	std	Y+32, r25	; 0x20
    1124:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1126:	89 a1       	ldd	r24, Y+33	; 0x21
    1128:	9a a1       	ldd	r25, Y+34	; 0x22
    112a:	01 97       	sbiw	r24, 0x01	; 1
    112c:	9a a3       	std	Y+34, r25	; 0x22
    112e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1130:	89 a1       	ldd	r24, Y+33	; 0x21
    1132:	9a a1       	ldd	r25, Y+34	; 0x22
    1134:	00 97       	sbiw	r24, 0x00	; 0
    1136:	69 f7       	brne	.-38     	; 0x1112 <Display+0x482>
    1138:	14 c0       	rjmp	.+40     	; 0x1162 <Display+0x4d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    113a:	6b a1       	ldd	r22, Y+35	; 0x23
    113c:	7c a1       	ldd	r23, Y+36	; 0x24
    113e:	8d a1       	ldd	r24, Y+37	; 0x25
    1140:	9e a1       	ldd	r25, Y+38	; 0x26
    1142:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1146:	dc 01       	movw	r26, r24
    1148:	cb 01       	movw	r24, r22
    114a:	9a a3       	std	Y+34, r25	; 0x22
    114c:	89 a3       	std	Y+33, r24	; 0x21
    114e:	89 a1       	ldd	r24, Y+33	; 0x21
    1150:	9a a1       	ldd	r25, Y+34	; 0x22
    1152:	9e 8f       	std	Y+30, r25	; 0x1e
    1154:	8d 8f       	std	Y+29, r24	; 0x1d
    1156:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1158:	9e 8d       	ldd	r25, Y+30	; 0x1e
    115a:	01 97       	sbiw	r24, 0x01	; 1
    115c:	f1 f7       	brne	.-4      	; 0x115a <Display+0x4ca>
    115e:	9e 8f       	std	Y+30, r25	; 0x1e
    1160:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	//Display Hours_unit
	PORTA=0X02;
    1162:	eb e3       	ldi	r30, 0x3B	; 59
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	82 e0       	ldi	r24, 0x02	; 2
    1168:	80 83       	st	Z, r24
	PORTC =(PORTC & 0XF0) | (hours_unit & 0X0F);
    116a:	a5 e3       	ldi	r26, 0x35	; 53
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	e5 e3       	ldi	r30, 0x35	; 53
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	98 2f       	mov	r25, r24
    1176:	90 7f       	andi	r25, 0xF0	; 240
    1178:	80 91 6e 00 	lds	r24, 0x006E
    117c:	8f 70       	andi	r24, 0x0F	; 15
    117e:	89 2b       	or	r24, r25
    1180:	8c 93       	st	X, r24
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	a0 e0       	ldi	r26, 0x00	; 0
    1188:	b0 e4       	ldi	r27, 0x40	; 64
    118a:	89 8f       	std	Y+25, r24	; 0x19
    118c:	9a 8f       	std	Y+26, r25	; 0x1a
    118e:	ab 8f       	std	Y+27, r26	; 0x1b
    1190:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1192:	69 8d       	ldd	r22, Y+25	; 0x19
    1194:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1196:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1198:	9c 8d       	ldd	r25, Y+28	; 0x1c
    119a:	20 e0       	ldi	r18, 0x00	; 0
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	4a e7       	ldi	r20, 0x7A	; 122
    11a0:	55 e4       	ldi	r21, 0x45	; 69
    11a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11a6:	dc 01       	movw	r26, r24
    11a8:	cb 01       	movw	r24, r22
    11aa:	8d 8b       	std	Y+21, r24	; 0x15
    11ac:	9e 8b       	std	Y+22, r25	; 0x16
    11ae:	af 8b       	std	Y+23, r26	; 0x17
    11b0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    11b2:	6d 89       	ldd	r22, Y+21	; 0x15
    11b4:	7e 89       	ldd	r23, Y+22	; 0x16
    11b6:	8f 89       	ldd	r24, Y+23	; 0x17
    11b8:	98 8d       	ldd	r25, Y+24	; 0x18
    11ba:	20 e0       	ldi	r18, 0x00	; 0
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	40 e8       	ldi	r20, 0x80	; 128
    11c0:	5f e3       	ldi	r21, 0x3F	; 63
    11c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11c6:	88 23       	and	r24, r24
    11c8:	2c f4       	brge	.+10     	; 0x11d4 <Display+0x544>
		__ticks = 1;
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	9c 8b       	std	Y+20, r25	; 0x14
    11d0:	8b 8b       	std	Y+19, r24	; 0x13
    11d2:	3f c0       	rjmp	.+126    	; 0x1252 <Display+0x5c2>
	else if (__tmp > 65535)
    11d4:	6d 89       	ldd	r22, Y+21	; 0x15
    11d6:	7e 89       	ldd	r23, Y+22	; 0x16
    11d8:	8f 89       	ldd	r24, Y+23	; 0x17
    11da:	98 8d       	ldd	r25, Y+24	; 0x18
    11dc:	20 e0       	ldi	r18, 0x00	; 0
    11de:	3f ef       	ldi	r19, 0xFF	; 255
    11e0:	4f e7       	ldi	r20, 0x7F	; 127
    11e2:	57 e4       	ldi	r21, 0x47	; 71
    11e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11e8:	18 16       	cp	r1, r24
    11ea:	4c f5       	brge	.+82     	; 0x123e <Display+0x5ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11ec:	69 8d       	ldd	r22, Y+25	; 0x19
    11ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11f4:	20 e0       	ldi	r18, 0x00	; 0
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	40 e2       	ldi	r20, 0x20	; 32
    11fa:	51 e4       	ldi	r21, 0x41	; 65
    11fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1200:	dc 01       	movw	r26, r24
    1202:	cb 01       	movw	r24, r22
    1204:	bc 01       	movw	r22, r24
    1206:	cd 01       	movw	r24, r26
    1208:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    120c:	dc 01       	movw	r26, r24
    120e:	cb 01       	movw	r24, r22
    1210:	9c 8b       	std	Y+20, r25	; 0x14
    1212:	8b 8b       	std	Y+19, r24	; 0x13
    1214:	0f c0       	rjmp	.+30     	; 0x1234 <Display+0x5a4>
    1216:	80 e9       	ldi	r24, 0x90	; 144
    1218:	91 e0       	ldi	r25, 0x01	; 1
    121a:	9a 8b       	std	Y+18, r25	; 0x12
    121c:	89 8b       	std	Y+17, r24	; 0x11
    121e:	89 89       	ldd	r24, Y+17	; 0x11
    1220:	9a 89       	ldd	r25, Y+18	; 0x12
    1222:	01 97       	sbiw	r24, 0x01	; 1
    1224:	f1 f7       	brne	.-4      	; 0x1222 <Display+0x592>
    1226:	9a 8b       	std	Y+18, r25	; 0x12
    1228:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    122a:	8b 89       	ldd	r24, Y+19	; 0x13
    122c:	9c 89       	ldd	r25, Y+20	; 0x14
    122e:	01 97       	sbiw	r24, 0x01	; 1
    1230:	9c 8b       	std	Y+20, r25	; 0x14
    1232:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1234:	8b 89       	ldd	r24, Y+19	; 0x13
    1236:	9c 89       	ldd	r25, Y+20	; 0x14
    1238:	00 97       	sbiw	r24, 0x00	; 0
    123a:	69 f7       	brne	.-38     	; 0x1216 <Display+0x586>
    123c:	14 c0       	rjmp	.+40     	; 0x1266 <Display+0x5d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    123e:	6d 89       	ldd	r22, Y+21	; 0x15
    1240:	7e 89       	ldd	r23, Y+22	; 0x16
    1242:	8f 89       	ldd	r24, Y+23	; 0x17
    1244:	98 8d       	ldd	r25, Y+24	; 0x18
    1246:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    124a:	dc 01       	movw	r26, r24
    124c:	cb 01       	movw	r24, r22
    124e:	9c 8b       	std	Y+20, r25	; 0x14
    1250:	8b 8b       	std	Y+19, r24	; 0x13
    1252:	8b 89       	ldd	r24, Y+19	; 0x13
    1254:	9c 89       	ldd	r25, Y+20	; 0x14
    1256:	98 8b       	std	Y+16, r25	; 0x10
    1258:	8f 87       	std	Y+15, r24	; 0x0f
    125a:	8f 85       	ldd	r24, Y+15	; 0x0f
    125c:	98 89       	ldd	r25, Y+16	; 0x10
    125e:	01 97       	sbiw	r24, 0x01	; 1
    1260:	f1 f7       	brne	.-4      	; 0x125e <Display+0x5ce>
    1262:	98 8b       	std	Y+16, r25	; 0x10
    1264:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	//Display Hours_ten
	PORTA=0X01;
    1266:	eb e3       	ldi	r30, 0x3B	; 59
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	80 83       	st	Z, r24
	PORTC =(PORTC & 0XF0) | (hours_ten & 0X0F);
    126e:	a5 e3       	ldi	r26, 0x35	; 53
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	e5 e3       	ldi	r30, 0x35	; 53
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	98 2f       	mov	r25, r24
    127a:	90 7f       	andi	r25, 0xF0	; 240
    127c:	80 91 6f 00 	lds	r24, 0x006F
    1280:	8f 70       	andi	r24, 0x0F	; 15
    1282:	89 2b       	or	r24, r25
    1284:	8c 93       	st	X, r24
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	a0 e0       	ldi	r26, 0x00	; 0
    128c:	b0 e4       	ldi	r27, 0x40	; 64
    128e:	8b 87       	std	Y+11, r24	; 0x0b
    1290:	9c 87       	std	Y+12, r25	; 0x0c
    1292:	ad 87       	std	Y+13, r26	; 0x0d
    1294:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1296:	6b 85       	ldd	r22, Y+11	; 0x0b
    1298:	7c 85       	ldd	r23, Y+12	; 0x0c
    129a:	8d 85       	ldd	r24, Y+13	; 0x0d
    129c:	9e 85       	ldd	r25, Y+14	; 0x0e
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	4a e7       	ldi	r20, 0x7A	; 122
    12a4:	55 e4       	ldi	r21, 0x45	; 69
    12a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12aa:	dc 01       	movw	r26, r24
    12ac:	cb 01       	movw	r24, r22
    12ae:	8f 83       	std	Y+7, r24	; 0x07
    12b0:	98 87       	std	Y+8, r25	; 0x08
    12b2:	a9 87       	std	Y+9, r26	; 0x09
    12b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12b6:	6f 81       	ldd	r22, Y+7	; 0x07
    12b8:	78 85       	ldd	r23, Y+8	; 0x08
    12ba:	89 85       	ldd	r24, Y+9	; 0x09
    12bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    12be:	20 e0       	ldi	r18, 0x00	; 0
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	40 e8       	ldi	r20, 0x80	; 128
    12c4:	5f e3       	ldi	r21, 0x3F	; 63
    12c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12ca:	88 23       	and	r24, r24
    12cc:	2c f4       	brge	.+10     	; 0x12d8 <Display+0x648>
		__ticks = 1;
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	9e 83       	std	Y+6, r25	; 0x06
    12d4:	8d 83       	std	Y+5, r24	; 0x05
    12d6:	3f c0       	rjmp	.+126    	; 0x1356 <Display+0x6c6>
	else if (__tmp > 65535)
    12d8:	6f 81       	ldd	r22, Y+7	; 0x07
    12da:	78 85       	ldd	r23, Y+8	; 0x08
    12dc:	89 85       	ldd	r24, Y+9	; 0x09
    12de:	9a 85       	ldd	r25, Y+10	; 0x0a
    12e0:	20 e0       	ldi	r18, 0x00	; 0
    12e2:	3f ef       	ldi	r19, 0xFF	; 255
    12e4:	4f e7       	ldi	r20, 0x7F	; 127
    12e6:	57 e4       	ldi	r21, 0x47	; 71
    12e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12ec:	18 16       	cp	r1, r24
    12ee:	4c f5       	brge	.+82     	; 0x1342 <Display+0x6b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    12f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    12f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    12f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	40 e2       	ldi	r20, 0x20	; 32
    12fe:	51 e4       	ldi	r21, 0x41	; 65
    1300:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1304:	dc 01       	movw	r26, r24
    1306:	cb 01       	movw	r24, r22
    1308:	bc 01       	movw	r22, r24
    130a:	cd 01       	movw	r24, r26
    130c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1310:	dc 01       	movw	r26, r24
    1312:	cb 01       	movw	r24, r22
    1314:	9e 83       	std	Y+6, r25	; 0x06
    1316:	8d 83       	std	Y+5, r24	; 0x05
    1318:	0f c0       	rjmp	.+30     	; 0x1338 <Display+0x6a8>
    131a:	80 e9       	ldi	r24, 0x90	; 144
    131c:	91 e0       	ldi	r25, 0x01	; 1
    131e:	9c 83       	std	Y+4, r25	; 0x04
    1320:	8b 83       	std	Y+3, r24	; 0x03
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	9c 81       	ldd	r25, Y+4	; 0x04
    1326:	01 97       	sbiw	r24, 0x01	; 1
    1328:	f1 f7       	brne	.-4      	; 0x1326 <Display+0x696>
    132a:	9c 83       	std	Y+4, r25	; 0x04
    132c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    132e:	8d 81       	ldd	r24, Y+5	; 0x05
    1330:	9e 81       	ldd	r25, Y+6	; 0x06
    1332:	01 97       	sbiw	r24, 0x01	; 1
    1334:	9e 83       	std	Y+6, r25	; 0x06
    1336:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1338:	8d 81       	ldd	r24, Y+5	; 0x05
    133a:	9e 81       	ldd	r25, Y+6	; 0x06
    133c:	00 97       	sbiw	r24, 0x00	; 0
    133e:	69 f7       	brne	.-38     	; 0x131a <Display+0x68a>
    1340:	14 c0       	rjmp	.+40     	; 0x136a <Display+0x6da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1342:	6f 81       	ldd	r22, Y+7	; 0x07
    1344:	78 85       	ldd	r23, Y+8	; 0x08
    1346:	89 85       	ldd	r24, Y+9	; 0x09
    1348:	9a 85       	ldd	r25, Y+10	; 0x0a
    134a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    134e:	dc 01       	movw	r26, r24
    1350:	cb 01       	movw	r24, r22
    1352:	9e 83       	std	Y+6, r25	; 0x06
    1354:	8d 83       	std	Y+5, r24	; 0x05
    1356:	8d 81       	ldd	r24, Y+5	; 0x05
    1358:	9e 81       	ldd	r25, Y+6	; 0x06
    135a:	9a 83       	std	Y+2, r25	; 0x02
    135c:	89 83       	std	Y+1, r24	; 0x01
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	9a 81       	ldd	r25, Y+2	; 0x02
    1362:	01 97       	sbiw	r24, 0x01	; 1
    1364:	f1 f7       	brne	.-4      	; 0x1362 <Display+0x6d2>
    1366:	9a 83       	std	Y+2, r25	; 0x02
    1368:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    136a:	cc 5a       	subi	r28, 0xAC	; 172
    136c:	df 4f       	sbci	r29, 0xFF	; 255
    136e:	0f b6       	in	r0, 0x3f	; 63
    1370:	f8 94       	cli
    1372:	de bf       	out	0x3e, r29	; 62
    1374:	0f be       	out	0x3f, r0	; 63
    1376:	cd bf       	out	0x3d, r28	; 61
    1378:	cf 91       	pop	r28
    137a:	df 91       	pop	r29
    137c:	1f 91       	pop	r17
    137e:	0f 91       	pop	r16
    1380:	08 95       	ret

00001382 <Timer1_CTC>:

void Timer1_CTC(void)
{
    1382:	df 93       	push	r29
    1384:	cf 93       	push	r28
    1386:	cd b7       	in	r28, 0x3d	; 61
    1388:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0; // Set timer1 initial number to zero
    138a:	ec e4       	ldi	r30, 0x4C	; 76
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	11 82       	std	Z+1, r1	; 0x01
    1390:	10 82       	st	Z, r1
	OCR1A = compare_value; //Set Compare value for Prescaler=1024
    1392:	ea e4       	ldi	r30, 0x4A	; 74
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	89 e0       	ldi	r24, 0x09	; 9
    1398:	9d e3       	ldi	r25, 0x3D	; 61
    139a:	91 83       	std	Z+1, r25	; 0x01
    139c:	80 83       	st	Z, r24

	TCCR1A = (1<<FOC1A);
    139e:	ef e4       	ldi	r30, 0x4F	; 79
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	88 e0       	ldi	r24, 0x08	; 8
    13a4:	80 83       	st	Z, r24
	/* Configure timer control register TCCR1A
	 * 1. COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
	 * 2. FOC1A=1 FOC1B=0
	 * 3. CTC Mode WGM10=0 WGM11=0 (Mode Number 4) */

	TCCR1B = (1<<WGM12) | (1<<CS12) | (1<<CS10);
    13a6:	ee e4       	ldi	r30, 0x4E	; 78
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	8d e0       	ldi	r24, 0x0D	; 13
    13ac:	80 83       	st	Z, r24
	/* Configure timer control register TCCR1B
	* 1. CTC Mode WGM12=1 WGM13=0 (Mode Number 4)
	* 2. Prescaler = F_CPU/1024 CS10=0 CS10=1 CS12=1 */

	TIMSK = (1<<OCIE1A); // Enable Timer1 Compare A Interrupt
    13ae:	e9 e5       	ldi	r30, 0x59	; 89
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 e1       	ldi	r24, 0x10	; 16
    13b4:	80 83       	st	Z, r24
}
    13b6:	cf 91       	pop	r28
    13b8:	df 91       	pop	r29
    13ba:	08 95       	ret

000013bc <Define_Port>:

void Define_Port(void)
{
    13bc:	df 93       	push	r29
    13be:	cf 93       	push	r28
    13c0:	cd b7       	in	r28, 0x3d	; 61
    13c2:	de b7       	in	r29, 0x3e	; 62
//Port D
	DDRD |= (1<<PD5); // PD5 Output pin(Count down led)
    13c4:	a1 e3       	ldi	r26, 0x31	; 49
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	e1 e3       	ldi	r30, 0x31	; 49
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	80 62       	ori	r24, 0x20	; 32
    13d0:	8c 93       	st	X, r24
	PORTD &=~ (1<<PD5); //Led of PD5 off at start
    13d2:	a2 e3       	ldi	r26, 0x32	; 50
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	e2 e3       	ldi	r30, 0x32	; 50
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	8f 7d       	andi	r24, 0xDF	; 223
    13de:	8c 93       	st	X, r24

	DDRD |= (1<<PD4); // PD4 Output pin(Count up led)
    13e0:	a1 e3       	ldi	r26, 0x31	; 49
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	e1 e3       	ldi	r30, 0x31	; 49
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	80 61       	ori	r24, 0x10	; 16
    13ec:	8c 93       	st	X, r24
	PORTD |= (1<<PD4); // Led of PD4 off at start
    13ee:	a2 e3       	ldi	r26, 0x32	; 50
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	e2 e3       	ldi	r30, 0x32	; 50
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	80 61       	ori	r24, 0x10	; 16
    13fa:	8c 93       	st	X, r24

	DDRD &=~ (1<<PD3); // PD3 Input pin(Button for Pause)
    13fc:	a1 e3       	ldi	r26, 0x31	; 49
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	e1 e3       	ldi	r30, 0x31	; 49
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	87 7f       	andi	r24, 0xF7	; 247
    1408:	8c 93       	st	X, r24

	DDRD &=~ (1<<PD2); // PD2 Input pin(Button for Reset)
    140a:	a1 e3       	ldi	r26, 0x31	; 49
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	e1 e3       	ldi	r30, 0x31	; 49
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	8b 7f       	andi	r24, 0xFB	; 251
    1416:	8c 93       	st	X, r24
	PORTD |= (1<<PD2); // Enable pull-up resistor on PD2
    1418:	a2 e3       	ldi	r26, 0x32	; 50
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e2 e3       	ldi	r30, 0x32	; 50
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	84 60       	ori	r24, 0x04	; 4
    1424:	8c 93       	st	X, r24

	DDRD |= (1<<PD0); // PD0 Output pin(Alarm led)
    1426:	a1 e3       	ldi	r26, 0x31	; 49
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	e1 e3       	ldi	r30, 0x31	; 49
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	81 60       	ori	r24, 0x01	; 1
    1432:	8c 93       	st	X, r24
	PORTD &=~ (1<<PD0); // Led of PD0 off at start
    1434:	a2 e3       	ldi	r26, 0x32	; 50
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e2 e3       	ldi	r30, 0x32	; 50
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	8e 7f       	andi	r24, 0xFE	; 254
    1440:	8c 93       	st	X, r24

//Port C
	DDRC |= 0X0F; // Set first 4 bits in Port C as output
    1442:	a4 e3       	ldi	r26, 0x34	; 52
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	e4 e3       	ldi	r30, 0x34	; 52
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	8f 60       	ori	r24, 0x0F	; 15
    144e:	8c 93       	st	X, r24
	PORTC &= 0XF0; // Clear first 4 bits in Port C
    1450:	a5 e3       	ldi	r26, 0x35	; 53
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	e5 e3       	ldi	r30, 0x35	; 53
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	80 7f       	andi	r24, 0xF0	; 240
    145c:	8c 93       	st	X, r24

//Port B
	DDRB &=~ (1<<PB7); // PB7 Input pin(Button for Count mode)
    145e:	a7 e3       	ldi	r26, 0x37	; 55
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	e7 e3       	ldi	r30, 0x37	; 55
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	8f 77       	andi	r24, 0x7F	; 127
    146a:	8c 93       	st	X, r24
	PORTB |= (1<<PB7); //Enable pull-up resistor on PB7
    146c:	a8 e3       	ldi	r26, 0x38	; 56
    146e:	b0 e0       	ldi	r27, 0x00	; 0
    1470:	e8 e3       	ldi	r30, 0x38	; 56
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	80 68       	ori	r24, 0x80	; 128
    1478:	8c 93       	st	X, r24

	DDRB &=~ (1<<PB6); // PB6 Input pin(Button for Seconds Increment)
    147a:	a7 e3       	ldi	r26, 0x37	; 55
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	e7 e3       	ldi	r30, 0x37	; 55
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	8f 7b       	andi	r24, 0xBF	; 191
    1486:	8c 93       	st	X, r24
	PORTB |= (1<<PB6); // Enable pull-up resistor on PB6
    1488:	a8 e3       	ldi	r26, 0x38	; 56
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	e8 e3       	ldi	r30, 0x38	; 56
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	80 64       	ori	r24, 0x40	; 64
    1494:	8c 93       	st	X, r24

	DDRB &=~ (1<<PB5); // PB5 Input pin(Button for Seconds Decrement)
    1496:	a7 e3       	ldi	r26, 0x37	; 55
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	e7 e3       	ldi	r30, 0x37	; 55
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	80 81       	ld	r24, Z
    14a0:	8f 7d       	andi	r24, 0xDF	; 223
    14a2:	8c 93       	st	X, r24
	PORTB |= (1<<PB5); // Enable pull-up resistor on PB5
    14a4:	a8 e3       	ldi	r26, 0x38	; 56
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	e8 e3       	ldi	r30, 0x38	; 56
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	80 62       	ori	r24, 0x20	; 32
    14b0:	8c 93       	st	X, r24

	DDRB &=~ (1<<PB4); // PB4 Input pin(Button for Minutes Increment)
    14b2:	a7 e3       	ldi	r26, 0x37	; 55
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	e7 e3       	ldi	r30, 0x37	; 55
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	8f 7e       	andi	r24, 0xEF	; 239
    14be:	8c 93       	st	X, r24
	PORTB |= (1<<PB4); // Enable pull-up resistor on PB4
    14c0:	a8 e3       	ldi	r26, 0x38	; 56
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	e8 e3       	ldi	r30, 0x38	; 56
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	80 61       	ori	r24, 0x10	; 16
    14cc:	8c 93       	st	X, r24

	DDRB &=~ (1<<PB3); // PB3 Input pin(Button for Minutes Decrement)
    14ce:	a7 e3       	ldi	r26, 0x37	; 55
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	e7 e3       	ldi	r30, 0x37	; 55
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	87 7f       	andi	r24, 0xF7	; 247
    14da:	8c 93       	st	X, r24
	PORTB |= (1<<PB3); // Enable pull-up resistor on PB3
    14dc:	a8 e3       	ldi	r26, 0x38	; 56
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	e8 e3       	ldi	r30, 0x38	; 56
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	88 60       	ori	r24, 0x08	; 8
    14e8:	8c 93       	st	X, r24

	DDRB &=~ (1<<PB2); // PB2 Input pin(Button for Resume)
    14ea:	a7 e3       	ldi	r26, 0x37	; 55
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	e7 e3       	ldi	r30, 0x37	; 55
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	8b 7f       	andi	r24, 0xFB	; 251
    14f6:	8c 93       	st	X, r24
	PORTB |= (1<<PB2); // Enable pull-up resistor on PB2
    14f8:	a8 e3       	ldi	r26, 0x38	; 56
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	e8 e3       	ldi	r30, 0x38	; 56
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	84 60       	ori	r24, 0x04	; 4
    1504:	8c 93       	st	X, r24

	DDRB &=~ (1<<PB1); // PB1 Input pin(Button for Hours Increment)
    1506:	a7 e3       	ldi	r26, 0x37	; 55
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	e7 e3       	ldi	r30, 0x37	; 55
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	8d 7f       	andi	r24, 0xFD	; 253
    1512:	8c 93       	st	X, r24
	PORTB |= (1<<PB1); // Enable pull-up resistor on PB1
    1514:	a8 e3       	ldi	r26, 0x38	; 56
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	e8 e3       	ldi	r30, 0x38	; 56
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	82 60       	ori	r24, 0x02	; 2
    1520:	8c 93       	st	X, r24

	DDRB &=~ (1<<PB0); // PB0 Input pin(Button for Hours Decrement)
    1522:	a7 e3       	ldi	r26, 0x37	; 55
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	e7 e3       	ldi	r30, 0x37	; 55
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	8e 7f       	andi	r24, 0xFE	; 254
    152e:	8c 93       	st	X, r24
	PORTB |= (1<<PB0); // Enable pull-up resistor on PB0
    1530:	a8 e3       	ldi	r26, 0x38	; 56
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	e8 e3       	ldi	r30, 0x38	; 56
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	81 60       	ori	r24, 0x01	; 1
    153c:	8c 93       	st	X, r24

//Port A
	DDRA |= 0X3F; // Set first 6 bits in Port A as output
    153e:	aa e3       	ldi	r26, 0x3A	; 58
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	ea e3       	ldi	r30, 0x3A	; 58
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	8f 63       	ori	r24, 0x3F	; 63
    154a:	8c 93       	st	X, r24
	PORTA &= 0XC0; // Clear first 6 bits in Port A
    154c:	ab e3       	ldi	r26, 0x3B	; 59
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	eb e3       	ldi	r30, 0x3B	; 59
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	80 7c       	andi	r24, 0xC0	; 192
    1558:	8c 93       	st	X, r24

}
    155a:	cf 91       	pop	r28
    155c:	df 91       	pop	r29
    155e:	08 95       	ret

00001560 <Interrupt0>:

void Interrupt0(void)
{
    1560:	df 93       	push	r29
    1562:	cf 93       	push	r28
    1564:	cd b7       	in	r28, 0x3d	; 61
    1566:	de b7       	in	r29, 0x3e	; 62
	MCUCR |= (1<<ISC01); //Set ISC01 bit to 1 (falling edge trigger)
    1568:	a5 e5       	ldi	r26, 0x55	; 85
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	e5 e5       	ldi	r30, 0x55	; 85
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	82 60       	ori	r24, 0x02	; 2
    1574:	8c 93       	st	X, r24
	GICR |= (1<<INT0); //Set INT0 bit to 1 (enable INT0)
    1576:	ab e5       	ldi	r26, 0x5B	; 91
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	eb e5       	ldi	r30, 0x5B	; 91
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	80 64       	ori	r24, 0x40	; 64
    1582:	8c 93       	st	X, r24
}
    1584:	cf 91       	pop	r28
    1586:	df 91       	pop	r29
    1588:	08 95       	ret

0000158a <Interrupt1>:

void Interrupt1(void)
{
    158a:	df 93       	push	r29
    158c:	cf 93       	push	r28
    158e:	cd b7       	in	r28, 0x3d	; 61
    1590:	de b7       	in	r29, 0x3e	; 62
	MCUCR |= (1<<ISC10) | (1<<ISC11); //Set ISC11 and ISC10 bits to 1 (rising edge trigger)
    1592:	a5 e5       	ldi	r26, 0x55	; 85
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	e5 e5       	ldi	r30, 0x55	; 85
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	8c 60       	ori	r24, 0x0C	; 12
    159e:	8c 93       	st	X, r24
	GICR |= (1<<INT1); //Set INT1 bit to 1 (enable INT1)
    15a0:	ab e5       	ldi	r26, 0x5B	; 91
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	eb e5       	ldi	r30, 0x5B	; 91
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	80 68       	ori	r24, 0x80	; 128
    15ac:	8c 93       	st	X, r24
}
    15ae:	cf 91       	pop	r28
    15b0:	df 91       	pop	r29
    15b2:	08 95       	ret

000015b4 <Interrupt2>:

void Interrupt2(void)
{
    15b4:	df 93       	push	r29
    15b6:	cf 93       	push	r28
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
	GICR |= (1<<INT2); //Set INT2 bit to 1 to enable INT2
    15bc:	ab e5       	ldi	r26, 0x5B	; 91
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	eb e5       	ldi	r30, 0x5B	; 91
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	80 62       	ori	r24, 0x20	; 32
    15c8:	8c 93       	st	X, r24
}
    15ca:	cf 91       	pop	r28
    15cc:	df 91       	pop	r29
    15ce:	08 95       	ret

000015d0 <Hours_Increment>:

void Hours_Increment(void)
{
    15d0:	df 93       	push	r29
    15d2:	cf 93       	push	r28
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
    15d8:	2e 97       	sbiw	r28, 0x0e	; 14
    15da:	0f b6       	in	r0, 0x3f	; 63
    15dc:	f8 94       	cli
    15de:	de bf       	out	0x3e, r29	; 62
    15e0:	0f be       	out	0x3f, r0	; 63
    15e2:	cd bf       	out	0x3d, r28	; 61
	if (!(PINB & (1 << PB1))) //Check if button is pressed (active low)
    15e4:	e6 e3       	ldi	r30, 0x36	; 54
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	88 2f       	mov	r24, r24
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	82 70       	andi	r24, 0x02	; 2
    15f0:	90 70       	andi	r25, 0x00	; 0
    15f2:	00 97       	sbiw	r24, 0x00	; 0
    15f4:	09 f0       	breq	.+2      	; 0x15f8 <Hours_Increment+0x28>
    15f6:	9f c0       	rjmp	.+318    	; 0x1736 <Hours_Increment+0x166>
    15f8:	80 e0       	ldi	r24, 0x00	; 0
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	a0 ef       	ldi	r26, 0xF0	; 240
    15fe:	b1 e4       	ldi	r27, 0x41	; 65
    1600:	8b 87       	std	Y+11, r24	; 0x0b
    1602:	9c 87       	std	Y+12, r25	; 0x0c
    1604:	ad 87       	std	Y+13, r26	; 0x0d
    1606:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1608:	6b 85       	ldd	r22, Y+11	; 0x0b
    160a:	7c 85       	ldd	r23, Y+12	; 0x0c
    160c:	8d 85       	ldd	r24, Y+13	; 0x0d
    160e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	4a e7       	ldi	r20, 0x7A	; 122
    1616:	55 e4       	ldi	r21, 0x45	; 69
    1618:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    161c:	dc 01       	movw	r26, r24
    161e:	cb 01       	movw	r24, r22
    1620:	8f 83       	std	Y+7, r24	; 0x07
    1622:	98 87       	std	Y+8, r25	; 0x08
    1624:	a9 87       	std	Y+9, r26	; 0x09
    1626:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1628:	6f 81       	ldd	r22, Y+7	; 0x07
    162a:	78 85       	ldd	r23, Y+8	; 0x08
    162c:	89 85       	ldd	r24, Y+9	; 0x09
    162e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	40 e8       	ldi	r20, 0x80	; 128
    1636:	5f e3       	ldi	r21, 0x3F	; 63
    1638:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    163c:	88 23       	and	r24, r24
    163e:	2c f4       	brge	.+10     	; 0x164a <Hours_Increment+0x7a>
		__ticks = 1;
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	9e 83       	std	Y+6, r25	; 0x06
    1646:	8d 83       	std	Y+5, r24	; 0x05
    1648:	3f c0       	rjmp	.+126    	; 0x16c8 <Hours_Increment+0xf8>
	else if (__tmp > 65535)
    164a:	6f 81       	ldd	r22, Y+7	; 0x07
    164c:	78 85       	ldd	r23, Y+8	; 0x08
    164e:	89 85       	ldd	r24, Y+9	; 0x09
    1650:	9a 85       	ldd	r25, Y+10	; 0x0a
    1652:	20 e0       	ldi	r18, 0x00	; 0
    1654:	3f ef       	ldi	r19, 0xFF	; 255
    1656:	4f e7       	ldi	r20, 0x7F	; 127
    1658:	57 e4       	ldi	r21, 0x47	; 71
    165a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    165e:	18 16       	cp	r1, r24
    1660:	4c f5       	brge	.+82     	; 0x16b4 <Hours_Increment+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1662:	6b 85       	ldd	r22, Y+11	; 0x0b
    1664:	7c 85       	ldd	r23, Y+12	; 0x0c
    1666:	8d 85       	ldd	r24, Y+13	; 0x0d
    1668:	9e 85       	ldd	r25, Y+14	; 0x0e
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	40 e2       	ldi	r20, 0x20	; 32
    1670:	51 e4       	ldi	r21, 0x41	; 65
    1672:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1676:	dc 01       	movw	r26, r24
    1678:	cb 01       	movw	r24, r22
    167a:	bc 01       	movw	r22, r24
    167c:	cd 01       	movw	r24, r26
    167e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1682:	dc 01       	movw	r26, r24
    1684:	cb 01       	movw	r24, r22
    1686:	9e 83       	std	Y+6, r25	; 0x06
    1688:	8d 83       	std	Y+5, r24	; 0x05
    168a:	0f c0       	rjmp	.+30     	; 0x16aa <Hours_Increment+0xda>
    168c:	80 e9       	ldi	r24, 0x90	; 144
    168e:	91 e0       	ldi	r25, 0x01	; 1
    1690:	9c 83       	std	Y+4, r25	; 0x04
    1692:	8b 83       	std	Y+3, r24	; 0x03
    1694:	8b 81       	ldd	r24, Y+3	; 0x03
    1696:	9c 81       	ldd	r25, Y+4	; 0x04
    1698:	01 97       	sbiw	r24, 0x01	; 1
    169a:	f1 f7       	brne	.-4      	; 0x1698 <Hours_Increment+0xc8>
    169c:	9c 83       	std	Y+4, r25	; 0x04
    169e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16a0:	8d 81       	ldd	r24, Y+5	; 0x05
    16a2:	9e 81       	ldd	r25, Y+6	; 0x06
    16a4:	01 97       	sbiw	r24, 0x01	; 1
    16a6:	9e 83       	std	Y+6, r25	; 0x06
    16a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16aa:	8d 81       	ldd	r24, Y+5	; 0x05
    16ac:	9e 81       	ldd	r25, Y+6	; 0x06
    16ae:	00 97       	sbiw	r24, 0x00	; 0
    16b0:	69 f7       	brne	.-38     	; 0x168c <Hours_Increment+0xbc>
    16b2:	14 c0       	rjmp	.+40     	; 0x16dc <Hours_Increment+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16b4:	6f 81       	ldd	r22, Y+7	; 0x07
    16b6:	78 85       	ldd	r23, Y+8	; 0x08
    16b8:	89 85       	ldd	r24, Y+9	; 0x09
    16ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    16bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c0:	dc 01       	movw	r26, r24
    16c2:	cb 01       	movw	r24, r22
    16c4:	9e 83       	std	Y+6, r25	; 0x06
    16c6:	8d 83       	std	Y+5, r24	; 0x05
    16c8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ca:	9e 81       	ldd	r25, Y+6	; 0x06
    16cc:	9a 83       	std	Y+2, r25	; 0x02
    16ce:	89 83       	std	Y+1, r24	; 0x01
    16d0:	89 81       	ldd	r24, Y+1	; 0x01
    16d2:	9a 81       	ldd	r25, Y+2	; 0x02
    16d4:	01 97       	sbiw	r24, 0x01	; 1
    16d6:	f1 f7       	brne	.-4      	; 0x16d4 <Hours_Increment+0x104>
    16d8:	9a 83       	std	Y+2, r25	; 0x02
    16da:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(30); //Debounce delay
		if (!(PINB & (1 << PB1))) //Check if button is still pressed
    16dc:	e6 e3       	ldi	r30, 0x36	; 54
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	88 2f       	mov	r24, r24
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	82 70       	andi	r24, 0x02	; 2
    16e8:	90 70       	andi	r25, 0x00	; 0
    16ea:	00 97       	sbiw	r24, 0x00	; 0
    16ec:	31 f5       	brne	.+76     	; 0x173a <Hours_Increment+0x16a>
		{
			if(flag_hours_increment == 0) // Proceed to increment hours only if not already incrementing
    16ee:	80 91 70 00 	lds	r24, 0x0070
    16f2:	88 23       	and	r24, r24
    16f4:	11 f5       	brne	.+68     	; 0x173a <Hours_Increment+0x16a>
			{
				if(hours_unit == 9) //Check hours unit to prevent overflow
    16f6:	80 91 6e 00 	lds	r24, 0x006E
    16fa:	89 30       	cpi	r24, 0x09	; 9
    16fc:	99 f4       	brne	.+38     	; 0x1724 <Hours_Increment+0x154>
				{
					hours_unit = 0; //Set hours unit to 0
    16fe:	10 92 6e 00 	sts	0x006E, r1
					if(hours_ten == 9) //Check hours ten to prevent overflow
    1702:	80 91 6f 00 	lds	r24, 0x006F
    1706:	89 30       	cpi	r24, 0x09	; 9
    1708:	39 f4       	brne	.+14     	; 0x1718 <Hours_Increment+0x148>
					{
						hours_ten = 9; //Set hours ten to 9
    170a:	89 e0       	ldi	r24, 0x09	; 9
    170c:	80 93 6f 00 	sts	0x006F, r24
						hours_unit = 9; //Set hours unit to 9
    1710:	89 e0       	ldi	r24, 0x09	; 9
    1712:	80 93 6e 00 	sts	0x006E, r24
    1716:	0b c0       	rjmp	.+22     	; 0x172e <Hours_Increment+0x15e>
					}
					else
					{
						hours_ten++; //Increment hours ten
    1718:	80 91 6f 00 	lds	r24, 0x006F
    171c:	8f 5f       	subi	r24, 0xFF	; 255
    171e:	80 93 6f 00 	sts	0x006F, r24
    1722:	05 c0       	rjmp	.+10     	; 0x172e <Hours_Increment+0x15e>
					}
				}
				else
				{
					hours_unit++; //Increment hours unit
    1724:	80 91 6e 00 	lds	r24, 0x006E
    1728:	8f 5f       	subi	r24, 0xFF	; 255
    172a:	80 93 6e 00 	sts	0x006E, r24
				}
				flag_hours_increment = 1; //Set the flag to indicate that hours have been incremented
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	80 93 70 00 	sts	0x0070, r24
    1734:	02 c0       	rjmp	.+4      	; 0x173a <Hours_Increment+0x16a>
			}
		}
	}
	else
	{
		flag_hours_increment = 0; //Reset the increment flag if the button is not pressed
    1736:	10 92 70 00 	sts	0x0070, r1
	}
}
    173a:	2e 96       	adiw	r28, 0x0e	; 14
    173c:	0f b6       	in	r0, 0x3f	; 63
    173e:	f8 94       	cli
    1740:	de bf       	out	0x3e, r29	; 62
    1742:	0f be       	out	0x3f, r0	; 63
    1744:	cd bf       	out	0x3d, r28	; 61
    1746:	cf 91       	pop	r28
    1748:	df 91       	pop	r29
    174a:	08 95       	ret

0000174c <Minutes_Increment>:

void Minutes_Increment(void)
{
    174c:	df 93       	push	r29
    174e:	cf 93       	push	r28
    1750:	cd b7       	in	r28, 0x3d	; 61
    1752:	de b7       	in	r29, 0x3e	; 62
    1754:	2e 97       	sbiw	r28, 0x0e	; 14
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	f8 94       	cli
    175a:	de bf       	out	0x3e, r29	; 62
    175c:	0f be       	out	0x3f, r0	; 63
    175e:	cd bf       	out	0x3d, r28	; 61
	if (!(PINB & (1 << PB4))) // Check if button is pressed (active low)
    1760:	e6 e3       	ldi	r30, 0x36	; 54
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	88 2f       	mov	r24, r24
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	80 71       	andi	r24, 0x10	; 16
    176c:	90 70       	andi	r25, 0x00	; 0
    176e:	00 97       	sbiw	r24, 0x00	; 0
    1770:	09 f0       	breq	.+2      	; 0x1774 <Minutes_Increment+0x28>
    1772:	9f c0       	rjmp	.+318    	; 0x18b2 <Minutes_Increment+0x166>
    1774:	80 e0       	ldi	r24, 0x00	; 0
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	a0 ef       	ldi	r26, 0xF0	; 240
    177a:	b1 e4       	ldi	r27, 0x41	; 65
    177c:	8b 87       	std	Y+11, r24	; 0x0b
    177e:	9c 87       	std	Y+12, r25	; 0x0c
    1780:	ad 87       	std	Y+13, r26	; 0x0d
    1782:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1784:	6b 85       	ldd	r22, Y+11	; 0x0b
    1786:	7c 85       	ldd	r23, Y+12	; 0x0c
    1788:	8d 85       	ldd	r24, Y+13	; 0x0d
    178a:	9e 85       	ldd	r25, Y+14	; 0x0e
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	4a e7       	ldi	r20, 0x7A	; 122
    1792:	55 e4       	ldi	r21, 0x45	; 69
    1794:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1798:	dc 01       	movw	r26, r24
    179a:	cb 01       	movw	r24, r22
    179c:	8f 83       	std	Y+7, r24	; 0x07
    179e:	98 87       	std	Y+8, r25	; 0x08
    17a0:	a9 87       	std	Y+9, r26	; 0x09
    17a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17a4:	6f 81       	ldd	r22, Y+7	; 0x07
    17a6:	78 85       	ldd	r23, Y+8	; 0x08
    17a8:	89 85       	ldd	r24, Y+9	; 0x09
    17aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	40 e8       	ldi	r20, 0x80	; 128
    17b2:	5f e3       	ldi	r21, 0x3F	; 63
    17b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17b8:	88 23       	and	r24, r24
    17ba:	2c f4       	brge	.+10     	; 0x17c6 <Minutes_Increment+0x7a>
		__ticks = 1;
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	9e 83       	std	Y+6, r25	; 0x06
    17c2:	8d 83       	std	Y+5, r24	; 0x05
    17c4:	3f c0       	rjmp	.+126    	; 0x1844 <Minutes_Increment+0xf8>
	else if (__tmp > 65535)
    17c6:	6f 81       	ldd	r22, Y+7	; 0x07
    17c8:	78 85       	ldd	r23, Y+8	; 0x08
    17ca:	89 85       	ldd	r24, Y+9	; 0x09
    17cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ce:	20 e0       	ldi	r18, 0x00	; 0
    17d0:	3f ef       	ldi	r19, 0xFF	; 255
    17d2:	4f e7       	ldi	r20, 0x7F	; 127
    17d4:	57 e4       	ldi	r21, 0x47	; 71
    17d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17da:	18 16       	cp	r1, r24
    17dc:	4c f5       	brge	.+82     	; 0x1830 <Minutes_Increment+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17de:	6b 85       	ldd	r22, Y+11	; 0x0b
    17e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    17e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    17e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	40 e2       	ldi	r20, 0x20	; 32
    17ec:	51 e4       	ldi	r21, 0x41	; 65
    17ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f2:	dc 01       	movw	r26, r24
    17f4:	cb 01       	movw	r24, r22
    17f6:	bc 01       	movw	r22, r24
    17f8:	cd 01       	movw	r24, r26
    17fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17fe:	dc 01       	movw	r26, r24
    1800:	cb 01       	movw	r24, r22
    1802:	9e 83       	std	Y+6, r25	; 0x06
    1804:	8d 83       	std	Y+5, r24	; 0x05
    1806:	0f c0       	rjmp	.+30     	; 0x1826 <Minutes_Increment+0xda>
    1808:	80 e9       	ldi	r24, 0x90	; 144
    180a:	91 e0       	ldi	r25, 0x01	; 1
    180c:	9c 83       	std	Y+4, r25	; 0x04
    180e:	8b 83       	std	Y+3, r24	; 0x03
    1810:	8b 81       	ldd	r24, Y+3	; 0x03
    1812:	9c 81       	ldd	r25, Y+4	; 0x04
    1814:	01 97       	sbiw	r24, 0x01	; 1
    1816:	f1 f7       	brne	.-4      	; 0x1814 <Minutes_Increment+0xc8>
    1818:	9c 83       	std	Y+4, r25	; 0x04
    181a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    181c:	8d 81       	ldd	r24, Y+5	; 0x05
    181e:	9e 81       	ldd	r25, Y+6	; 0x06
    1820:	01 97       	sbiw	r24, 0x01	; 1
    1822:	9e 83       	std	Y+6, r25	; 0x06
    1824:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1826:	8d 81       	ldd	r24, Y+5	; 0x05
    1828:	9e 81       	ldd	r25, Y+6	; 0x06
    182a:	00 97       	sbiw	r24, 0x00	; 0
    182c:	69 f7       	brne	.-38     	; 0x1808 <Minutes_Increment+0xbc>
    182e:	14 c0       	rjmp	.+40     	; 0x1858 <Minutes_Increment+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1830:	6f 81       	ldd	r22, Y+7	; 0x07
    1832:	78 85       	ldd	r23, Y+8	; 0x08
    1834:	89 85       	ldd	r24, Y+9	; 0x09
    1836:	9a 85       	ldd	r25, Y+10	; 0x0a
    1838:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    183c:	dc 01       	movw	r26, r24
    183e:	cb 01       	movw	r24, r22
    1840:	9e 83       	std	Y+6, r25	; 0x06
    1842:	8d 83       	std	Y+5, r24	; 0x05
    1844:	8d 81       	ldd	r24, Y+5	; 0x05
    1846:	9e 81       	ldd	r25, Y+6	; 0x06
    1848:	9a 83       	std	Y+2, r25	; 0x02
    184a:	89 83       	std	Y+1, r24	; 0x01
    184c:	89 81       	ldd	r24, Y+1	; 0x01
    184e:	9a 81       	ldd	r25, Y+2	; 0x02
    1850:	01 97       	sbiw	r24, 0x01	; 1
    1852:	f1 f7       	brne	.-4      	; 0x1850 <Minutes_Increment+0x104>
    1854:	9a 83       	std	Y+2, r25	; 0x02
    1856:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(30); //Debounce delay
		if (!(PINB & (1 << PB4))) //Check if button is still pressed
    1858:	e6 e3       	ldi	r30, 0x36	; 54
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	88 2f       	mov	r24, r24
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	80 71       	andi	r24, 0x10	; 16
    1864:	90 70       	andi	r25, 0x00	; 0
    1866:	00 97       	sbiw	r24, 0x00	; 0
    1868:	31 f5       	brne	.+76     	; 0x18b6 <Minutes_Increment+0x16a>
		{
			if(flag_minutes_increment == 0) //Proceed to increment minutes only if not already incrementing
    186a:	80 91 71 00 	lds	r24, 0x0071
    186e:	88 23       	and	r24, r24
    1870:	11 f5       	brne	.+68     	; 0x18b6 <Minutes_Increment+0x16a>
			{
				if(minutes_unit == 9) //Check minutes unit to prevent overflow
    1872:	80 91 6c 00 	lds	r24, 0x006C
    1876:	89 30       	cpi	r24, 0x09	; 9
    1878:	99 f4       	brne	.+38     	; 0x18a0 <Minutes_Increment+0x154>
				{
					minutes_unit = 0; //Set minutes unit to 0
    187a:	10 92 6c 00 	sts	0x006C, r1
					if(minutes_ten == 5) //Check minutes ten to prevent overflow
    187e:	80 91 6d 00 	lds	r24, 0x006D
    1882:	85 30       	cpi	r24, 0x05	; 5
    1884:	39 f4       	brne	.+14     	; 0x1894 <Minutes_Increment+0x148>
					{
						minutes_ten = 5; //Set minutes ten to 5
    1886:	85 e0       	ldi	r24, 0x05	; 5
    1888:	80 93 6d 00 	sts	0x006D, r24
						minutes_unit = 9; //Set minutes unit to 9
    188c:	89 e0       	ldi	r24, 0x09	; 9
    188e:	80 93 6c 00 	sts	0x006C, r24
    1892:	0b c0       	rjmp	.+22     	; 0x18aa <Minutes_Increment+0x15e>
					}
					else
					{
						minutes_ten++; //Increment minutes ten
    1894:	80 91 6d 00 	lds	r24, 0x006D
    1898:	8f 5f       	subi	r24, 0xFF	; 255
    189a:	80 93 6d 00 	sts	0x006D, r24
    189e:	05 c0       	rjmp	.+10     	; 0x18aa <Minutes_Increment+0x15e>
					}
				}
				else
				{
					minutes_unit++; //Increment minutes unit
    18a0:	80 91 6c 00 	lds	r24, 0x006C
    18a4:	8f 5f       	subi	r24, 0xFF	; 255
    18a6:	80 93 6c 00 	sts	0x006C, r24
				}
				flag_minutes_increment = 1; //Set the flag to indicate that minutes have been incremented
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	80 93 71 00 	sts	0x0071, r24
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <Minutes_Increment+0x16a>
			}
		}
	}
	else
	{
		flag_minutes_increment = 0; //Reset the increment flag if the button is not pressed
    18b2:	10 92 71 00 	sts	0x0071, r1
	}
}
    18b6:	2e 96       	adiw	r28, 0x0e	; 14
    18b8:	0f b6       	in	r0, 0x3f	; 63
    18ba:	f8 94       	cli
    18bc:	de bf       	out	0x3e, r29	; 62
    18be:	0f be       	out	0x3f, r0	; 63
    18c0:	cd bf       	out	0x3d, r28	; 61
    18c2:	cf 91       	pop	r28
    18c4:	df 91       	pop	r29
    18c6:	08 95       	ret

000018c8 <Seconds_Increment>:

void Seconds_Increment(void)
{
    18c8:	df 93       	push	r29
    18ca:	cf 93       	push	r28
    18cc:	cd b7       	in	r28, 0x3d	; 61
    18ce:	de b7       	in	r29, 0x3e	; 62
    18d0:	2e 97       	sbiw	r28, 0x0e	; 14
    18d2:	0f b6       	in	r0, 0x3f	; 63
    18d4:	f8 94       	cli
    18d6:	de bf       	out	0x3e, r29	; 62
    18d8:	0f be       	out	0x3f, r0	; 63
    18da:	cd bf       	out	0x3d, r28	; 61

	if (!(PINB & (1 << PB6))) //Check if button is pressed (active low)
    18dc:	e6 e3       	ldi	r30, 0x36	; 54
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	88 2f       	mov	r24, r24
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	80 74       	andi	r24, 0x40	; 64
    18e8:	90 70       	andi	r25, 0x00	; 0
    18ea:	00 97       	sbiw	r24, 0x00	; 0
    18ec:	09 f0       	breq	.+2      	; 0x18f0 <Seconds_Increment+0x28>
    18ee:	9f c0       	rjmp	.+318    	; 0x1a2e <Seconds_Increment+0x166>
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	a0 ef       	ldi	r26, 0xF0	; 240
    18f6:	b1 e4       	ldi	r27, 0x41	; 65
    18f8:	8b 87       	std	Y+11, r24	; 0x0b
    18fa:	9c 87       	std	Y+12, r25	; 0x0c
    18fc:	ad 87       	std	Y+13, r26	; 0x0d
    18fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1900:	6b 85       	ldd	r22, Y+11	; 0x0b
    1902:	7c 85       	ldd	r23, Y+12	; 0x0c
    1904:	8d 85       	ldd	r24, Y+13	; 0x0d
    1906:	9e 85       	ldd	r25, Y+14	; 0x0e
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	4a e7       	ldi	r20, 0x7A	; 122
    190e:	55 e4       	ldi	r21, 0x45	; 69
    1910:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1914:	dc 01       	movw	r26, r24
    1916:	cb 01       	movw	r24, r22
    1918:	8f 83       	std	Y+7, r24	; 0x07
    191a:	98 87       	std	Y+8, r25	; 0x08
    191c:	a9 87       	std	Y+9, r26	; 0x09
    191e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1920:	6f 81       	ldd	r22, Y+7	; 0x07
    1922:	78 85       	ldd	r23, Y+8	; 0x08
    1924:	89 85       	ldd	r24, Y+9	; 0x09
    1926:	9a 85       	ldd	r25, Y+10	; 0x0a
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	40 e8       	ldi	r20, 0x80	; 128
    192e:	5f e3       	ldi	r21, 0x3F	; 63
    1930:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1934:	88 23       	and	r24, r24
    1936:	2c f4       	brge	.+10     	; 0x1942 <Seconds_Increment+0x7a>
		__ticks = 1;
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	9e 83       	std	Y+6, r25	; 0x06
    193e:	8d 83       	std	Y+5, r24	; 0x05
    1940:	3f c0       	rjmp	.+126    	; 0x19c0 <Seconds_Increment+0xf8>
	else if (__tmp > 65535)
    1942:	6f 81       	ldd	r22, Y+7	; 0x07
    1944:	78 85       	ldd	r23, Y+8	; 0x08
    1946:	89 85       	ldd	r24, Y+9	; 0x09
    1948:	9a 85       	ldd	r25, Y+10	; 0x0a
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	3f ef       	ldi	r19, 0xFF	; 255
    194e:	4f e7       	ldi	r20, 0x7F	; 127
    1950:	57 e4       	ldi	r21, 0x47	; 71
    1952:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1956:	18 16       	cp	r1, r24
    1958:	4c f5       	brge	.+82     	; 0x19ac <Seconds_Increment+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    195a:	6b 85       	ldd	r22, Y+11	; 0x0b
    195c:	7c 85       	ldd	r23, Y+12	; 0x0c
    195e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1960:	9e 85       	ldd	r25, Y+14	; 0x0e
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	40 e2       	ldi	r20, 0x20	; 32
    1968:	51 e4       	ldi	r21, 0x41	; 65
    196a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	bc 01       	movw	r22, r24
    1974:	cd 01       	movw	r24, r26
    1976:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    197a:	dc 01       	movw	r26, r24
    197c:	cb 01       	movw	r24, r22
    197e:	9e 83       	std	Y+6, r25	; 0x06
    1980:	8d 83       	std	Y+5, r24	; 0x05
    1982:	0f c0       	rjmp	.+30     	; 0x19a2 <Seconds_Increment+0xda>
    1984:	80 e9       	ldi	r24, 0x90	; 144
    1986:	91 e0       	ldi	r25, 0x01	; 1
    1988:	9c 83       	std	Y+4, r25	; 0x04
    198a:	8b 83       	std	Y+3, r24	; 0x03
    198c:	8b 81       	ldd	r24, Y+3	; 0x03
    198e:	9c 81       	ldd	r25, Y+4	; 0x04
    1990:	01 97       	sbiw	r24, 0x01	; 1
    1992:	f1 f7       	brne	.-4      	; 0x1990 <Seconds_Increment+0xc8>
    1994:	9c 83       	std	Y+4, r25	; 0x04
    1996:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1998:	8d 81       	ldd	r24, Y+5	; 0x05
    199a:	9e 81       	ldd	r25, Y+6	; 0x06
    199c:	01 97       	sbiw	r24, 0x01	; 1
    199e:	9e 83       	std	Y+6, r25	; 0x06
    19a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a2:	8d 81       	ldd	r24, Y+5	; 0x05
    19a4:	9e 81       	ldd	r25, Y+6	; 0x06
    19a6:	00 97       	sbiw	r24, 0x00	; 0
    19a8:	69 f7       	brne	.-38     	; 0x1984 <Seconds_Increment+0xbc>
    19aa:	14 c0       	rjmp	.+40     	; 0x19d4 <Seconds_Increment+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ac:	6f 81       	ldd	r22, Y+7	; 0x07
    19ae:	78 85       	ldd	r23, Y+8	; 0x08
    19b0:	89 85       	ldd	r24, Y+9	; 0x09
    19b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b8:	dc 01       	movw	r26, r24
    19ba:	cb 01       	movw	r24, r22
    19bc:	9e 83       	std	Y+6, r25	; 0x06
    19be:	8d 83       	std	Y+5, r24	; 0x05
    19c0:	8d 81       	ldd	r24, Y+5	; 0x05
    19c2:	9e 81       	ldd	r25, Y+6	; 0x06
    19c4:	9a 83       	std	Y+2, r25	; 0x02
    19c6:	89 83       	std	Y+1, r24	; 0x01
    19c8:	89 81       	ldd	r24, Y+1	; 0x01
    19ca:	9a 81       	ldd	r25, Y+2	; 0x02
    19cc:	01 97       	sbiw	r24, 0x01	; 1
    19ce:	f1 f7       	brne	.-4      	; 0x19cc <Seconds_Increment+0x104>
    19d0:	9a 83       	std	Y+2, r25	; 0x02
    19d2:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(30); //Debounce delay
		if (!(PINB & (1 << PB6))) //Check if button is still pressed
    19d4:	e6 e3       	ldi	r30, 0x36	; 54
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 81       	ld	r24, Z
    19da:	88 2f       	mov	r24, r24
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	80 74       	andi	r24, 0x40	; 64
    19e0:	90 70       	andi	r25, 0x00	; 0
    19e2:	00 97       	sbiw	r24, 0x00	; 0
    19e4:	31 f5       	brne	.+76     	; 0x1a32 <Seconds_Increment+0x16a>
		{
			if(flag_seconds_increment == 0) //Proceed to increment seconds only if not already incrementing
    19e6:	80 91 72 00 	lds	r24, 0x0072
    19ea:	88 23       	and	r24, r24
    19ec:	11 f5       	brne	.+68     	; 0x1a32 <Seconds_Increment+0x16a>
			{
				if(seconds_unit == 9) //Check seconds unit to prevent overflow
    19ee:	80 91 6a 00 	lds	r24, 0x006A
    19f2:	89 30       	cpi	r24, 0x09	; 9
    19f4:	99 f4       	brne	.+38     	; 0x1a1c <Seconds_Increment+0x154>
				{
					seconds_unit = 0; //Set seconds unit to 0
    19f6:	10 92 6a 00 	sts	0x006A, r1
					if(seconds_ten == 5) //Check seconds ten to prevent overflow
    19fa:	80 91 6b 00 	lds	r24, 0x006B
    19fe:	85 30       	cpi	r24, 0x05	; 5
    1a00:	39 f4       	brne	.+14     	; 0x1a10 <Seconds_Increment+0x148>
					{
						seconds_ten = 5; //Set seconds ten to 5
    1a02:	85 e0       	ldi	r24, 0x05	; 5
    1a04:	80 93 6b 00 	sts	0x006B, r24
						seconds_unit = 9; //Set seconds unit to 9
    1a08:	89 e0       	ldi	r24, 0x09	; 9
    1a0a:	80 93 6a 00 	sts	0x006A, r24
    1a0e:	0b c0       	rjmp	.+22     	; 0x1a26 <Seconds_Increment+0x15e>
					}
					else
					{
						seconds_ten++; //Increment seconds ten
    1a10:	80 91 6b 00 	lds	r24, 0x006B
    1a14:	8f 5f       	subi	r24, 0xFF	; 255
    1a16:	80 93 6b 00 	sts	0x006B, r24
    1a1a:	05 c0       	rjmp	.+10     	; 0x1a26 <Seconds_Increment+0x15e>
					}
				}
				else
				{
					seconds_unit++; //Increment seconds unit
    1a1c:	80 91 6a 00 	lds	r24, 0x006A
    1a20:	8f 5f       	subi	r24, 0xFF	; 255
    1a22:	80 93 6a 00 	sts	0x006A, r24
				}
				flag_seconds_increment = 1; //Set the flag to indicate that seconds have been incremented
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	80 93 72 00 	sts	0x0072, r24
    1a2c:	02 c0       	rjmp	.+4      	; 0x1a32 <Seconds_Increment+0x16a>
			}
		}
	}
	else
	{
		flag_seconds_increment = 0; //Reset the increment flag if the button is not pressed
    1a2e:	10 92 72 00 	sts	0x0072, r1
	}

}
    1a32:	2e 96       	adiw	r28, 0x0e	; 14
    1a34:	0f b6       	in	r0, 0x3f	; 63
    1a36:	f8 94       	cli
    1a38:	de bf       	out	0x3e, r29	; 62
    1a3a:	0f be       	out	0x3f, r0	; 63
    1a3c:	cd bf       	out	0x3d, r28	; 61
    1a3e:	cf 91       	pop	r28
    1a40:	df 91       	pop	r29
    1a42:	08 95       	ret

00001a44 <Hours_Decrement>:

void Hours_Decrement(void)
{
    1a44:	df 93       	push	r29
    1a46:	cf 93       	push	r28
    1a48:	cd b7       	in	r28, 0x3d	; 61
    1a4a:	de b7       	in	r29, 0x3e	; 62
    1a4c:	2e 97       	sbiw	r28, 0x0e	; 14
    1a4e:	0f b6       	in	r0, 0x3f	; 63
    1a50:	f8 94       	cli
    1a52:	de bf       	out	0x3e, r29	; 62
    1a54:	0f be       	out	0x3f, r0	; 63
    1a56:	cd bf       	out	0x3d, r28	; 61
	if (!(PINB & (1 << PB0))) //Check if button is pressed (active low)
    1a58:	e6 e3       	ldi	r30, 0x36	; 54
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
    1a5e:	88 2f       	mov	r24, r24
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	81 70       	andi	r24, 0x01	; 1
    1a64:	90 70       	andi	r25, 0x00	; 0
    1a66:	00 97       	sbiw	r24, 0x00	; 0
    1a68:	09 f0       	breq	.+2      	; 0x1a6c <Hours_Decrement+0x28>
    1a6a:	9e c0       	rjmp	.+316    	; 0x1ba8 <Hours_Decrement+0x164>
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	a0 ef       	ldi	r26, 0xF0	; 240
    1a72:	b1 e4       	ldi	r27, 0x41	; 65
    1a74:	8b 87       	std	Y+11, r24	; 0x0b
    1a76:	9c 87       	std	Y+12, r25	; 0x0c
    1a78:	ad 87       	std	Y+13, r26	; 0x0d
    1a7a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a80:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a82:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	4a e7       	ldi	r20, 0x7A	; 122
    1a8a:	55 e4       	ldi	r21, 0x45	; 69
    1a8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a90:	dc 01       	movw	r26, r24
    1a92:	cb 01       	movw	r24, r22
    1a94:	8f 83       	std	Y+7, r24	; 0x07
    1a96:	98 87       	std	Y+8, r25	; 0x08
    1a98:	a9 87       	std	Y+9, r26	; 0x09
    1a9a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a9e:	78 85       	ldd	r23, Y+8	; 0x08
    1aa0:	89 85       	ldd	r24, Y+9	; 0x09
    1aa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	40 e8       	ldi	r20, 0x80	; 128
    1aaa:	5f e3       	ldi	r21, 0x3F	; 63
    1aac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ab0:	88 23       	and	r24, r24
    1ab2:	2c f4       	brge	.+10     	; 0x1abe <Hours_Decrement+0x7a>
		__ticks = 1;
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	9e 83       	std	Y+6, r25	; 0x06
    1aba:	8d 83       	std	Y+5, r24	; 0x05
    1abc:	3f c0       	rjmp	.+126    	; 0x1b3c <Hours_Decrement+0xf8>
	else if (__tmp > 65535)
    1abe:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac0:	78 85       	ldd	r23, Y+8	; 0x08
    1ac2:	89 85       	ldd	r24, Y+9	; 0x09
    1ac4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	3f ef       	ldi	r19, 0xFF	; 255
    1aca:	4f e7       	ldi	r20, 0x7F	; 127
    1acc:	57 e4       	ldi	r21, 0x47	; 71
    1ace:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ad2:	18 16       	cp	r1, r24
    1ad4:	4c f5       	brge	.+82     	; 0x1b28 <Hours_Decrement+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ad8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ada:	8d 85       	ldd	r24, Y+13	; 0x0d
    1adc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	40 e2       	ldi	r20, 0x20	; 32
    1ae4:	51 e4       	ldi	r21, 0x41	; 65
    1ae6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	bc 01       	movw	r22, r24
    1af0:	cd 01       	movw	r24, r26
    1af2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	9e 83       	std	Y+6, r25	; 0x06
    1afc:	8d 83       	std	Y+5, r24	; 0x05
    1afe:	0f c0       	rjmp	.+30     	; 0x1b1e <Hours_Decrement+0xda>
    1b00:	80 e9       	ldi	r24, 0x90	; 144
    1b02:	91 e0       	ldi	r25, 0x01	; 1
    1b04:	9c 83       	std	Y+4, r25	; 0x04
    1b06:	8b 83       	std	Y+3, r24	; 0x03
    1b08:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0c:	01 97       	sbiw	r24, 0x01	; 1
    1b0e:	f1 f7       	brne	.-4      	; 0x1b0c <Hours_Decrement+0xc8>
    1b10:	9c 83       	std	Y+4, r25	; 0x04
    1b12:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b14:	8d 81       	ldd	r24, Y+5	; 0x05
    1b16:	9e 81       	ldd	r25, Y+6	; 0x06
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	9e 83       	std	Y+6, r25	; 0x06
    1b1c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b20:	9e 81       	ldd	r25, Y+6	; 0x06
    1b22:	00 97       	sbiw	r24, 0x00	; 0
    1b24:	69 f7       	brne	.-38     	; 0x1b00 <Hours_Decrement+0xbc>
    1b26:	14 c0       	rjmp	.+40     	; 0x1b50 <Hours_Decrement+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b28:	6f 81       	ldd	r22, Y+7	; 0x07
    1b2a:	78 85       	ldd	r23, Y+8	; 0x08
    1b2c:	89 85       	ldd	r24, Y+9	; 0x09
    1b2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	9e 83       	std	Y+6, r25	; 0x06
    1b3a:	8d 83       	std	Y+5, r24	; 0x05
    1b3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b40:	9a 83       	std	Y+2, r25	; 0x02
    1b42:	89 83       	std	Y+1, r24	; 0x01
    1b44:	89 81       	ldd	r24, Y+1	; 0x01
    1b46:	9a 81       	ldd	r25, Y+2	; 0x02
    1b48:	01 97       	sbiw	r24, 0x01	; 1
    1b4a:	f1 f7       	brne	.-4      	; 0x1b48 <Hours_Decrement+0x104>
    1b4c:	9a 83       	std	Y+2, r25	; 0x02
    1b4e:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(30); //Debounce delay
		if (!(PINB & (1 << PB0))) //Check if button is still pressed
    1b50:	e6 e3       	ldi	r30, 0x36	; 54
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	88 2f       	mov	r24, r24
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	81 70       	andi	r24, 0x01	; 1
    1b5c:	90 70       	andi	r25, 0x00	; 0
    1b5e:	00 97       	sbiw	r24, 0x00	; 0
    1b60:	29 f5       	brne	.+74     	; 0x1bac <Hours_Decrement+0x168>
		{
			if(flag_hours_decrement == 0) //Proceed to decrement hours only if not already decrementing
    1b62:	80 91 73 00 	lds	r24, 0x0073
    1b66:	88 23       	and	r24, r24
    1b68:	09 f5       	brne	.+66     	; 0x1bac <Hours_Decrement+0x168>
			{
				if(hours_unit == 0) //Check hours unit if equal zero
    1b6a:	80 91 6e 00 	lds	r24, 0x006E
    1b6e:	88 23       	and	r24, r24
    1b70:	91 f4       	brne	.+36     	; 0x1b96 <Hours_Decrement+0x152>
				{
					hours_unit = 9; //Set hours unit to 9
    1b72:	89 e0       	ldi	r24, 0x09	; 9
    1b74:	80 93 6e 00 	sts	0x006E, r24
					if(hours_ten == 0) //Check hours ten if equal zero
    1b78:	80 91 6f 00 	lds	r24, 0x006F
    1b7c:	88 23       	and	r24, r24
    1b7e:	29 f4       	brne	.+10     	; 0x1b8a <Hours_Decrement+0x146>
					{
						hours_unit=0; //Set hours unit to 0
    1b80:	10 92 6e 00 	sts	0x006E, r1
						hours_ten=0; //Set hours ten to 0
    1b84:	10 92 6f 00 	sts	0x006F, r1
    1b88:	0b c0       	rjmp	.+22     	; 0x1ba0 <Hours_Decrement+0x15c>
					}
					else
					{
						hours_ten--; //Decrement hours ten
    1b8a:	80 91 6f 00 	lds	r24, 0x006F
    1b8e:	81 50       	subi	r24, 0x01	; 1
    1b90:	80 93 6f 00 	sts	0x006F, r24
    1b94:	05 c0       	rjmp	.+10     	; 0x1ba0 <Hours_Decrement+0x15c>
					}
				}
				else
				{
					hours_unit--; //Decrement hours unit
    1b96:	80 91 6e 00 	lds	r24, 0x006E
    1b9a:	81 50       	subi	r24, 0x01	; 1
    1b9c:	80 93 6e 00 	sts	0x006E, r24
				}
				flag_hours_decrement = 1; //Set the flag to indicate that hours have been decremented
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	80 93 73 00 	sts	0x0073, r24
    1ba6:	02 c0       	rjmp	.+4      	; 0x1bac <Hours_Decrement+0x168>
			}
		}
	}
	else
	{
		flag_hours_decrement = 0; //Reset the decrement flag if the button is not pressed
    1ba8:	10 92 73 00 	sts	0x0073, r1
	}
}
    1bac:	2e 96       	adiw	r28, 0x0e	; 14
    1bae:	0f b6       	in	r0, 0x3f	; 63
    1bb0:	f8 94       	cli
    1bb2:	de bf       	out	0x3e, r29	; 62
    1bb4:	0f be       	out	0x3f, r0	; 63
    1bb6:	cd bf       	out	0x3d, r28	; 61
    1bb8:	cf 91       	pop	r28
    1bba:	df 91       	pop	r29
    1bbc:	08 95       	ret

00001bbe <Minutes_Decrement>:

void Minutes_Decrement(void)
{
    1bbe:	df 93       	push	r29
    1bc0:	cf 93       	push	r28
    1bc2:	cd b7       	in	r28, 0x3d	; 61
    1bc4:	de b7       	in	r29, 0x3e	; 62
    1bc6:	2e 97       	sbiw	r28, 0x0e	; 14
    1bc8:	0f b6       	in	r0, 0x3f	; 63
    1bca:	f8 94       	cli
    1bcc:	de bf       	out	0x3e, r29	; 62
    1bce:	0f be       	out	0x3f, r0	; 63
    1bd0:	cd bf       	out	0x3d, r28	; 61
	if (!(PINB & (1 << PB3))) //Check if button is pressed (active low)
    1bd2:	e6 e3       	ldi	r30, 0x36	; 54
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 81       	ld	r24, Z
    1bd8:	88 2f       	mov	r24, r24
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	88 70       	andi	r24, 0x08	; 8
    1bde:	90 70       	andi	r25, 0x00	; 0
    1be0:	00 97       	sbiw	r24, 0x00	; 0
    1be2:	09 f0       	breq	.+2      	; 0x1be6 <Minutes_Decrement+0x28>
    1be4:	9e c0       	rjmp	.+316    	; 0x1d22 <Minutes_Decrement+0x164>
    1be6:	80 e0       	ldi	r24, 0x00	; 0
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	a0 ef       	ldi	r26, 0xF0	; 240
    1bec:	b1 e4       	ldi	r27, 0x41	; 65
    1bee:	8b 87       	std	Y+11, r24	; 0x0b
    1bf0:	9c 87       	std	Y+12, r25	; 0x0c
    1bf2:	ad 87       	std	Y+13, r26	; 0x0d
    1bf4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bf6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bf8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bfa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bfc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	4a e7       	ldi	r20, 0x7A	; 122
    1c04:	55 e4       	ldi	r21, 0x45	; 69
    1c06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c0a:	dc 01       	movw	r26, r24
    1c0c:	cb 01       	movw	r24, r22
    1c0e:	8f 83       	std	Y+7, r24	; 0x07
    1c10:	98 87       	std	Y+8, r25	; 0x08
    1c12:	a9 87       	std	Y+9, r26	; 0x09
    1c14:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c16:	6f 81       	ldd	r22, Y+7	; 0x07
    1c18:	78 85       	ldd	r23, Y+8	; 0x08
    1c1a:	89 85       	ldd	r24, Y+9	; 0x09
    1c1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	40 e8       	ldi	r20, 0x80	; 128
    1c24:	5f e3       	ldi	r21, 0x3F	; 63
    1c26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c2a:	88 23       	and	r24, r24
    1c2c:	2c f4       	brge	.+10     	; 0x1c38 <Minutes_Decrement+0x7a>
		__ticks = 1;
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	9e 83       	std	Y+6, r25	; 0x06
    1c34:	8d 83       	std	Y+5, r24	; 0x05
    1c36:	3f c0       	rjmp	.+126    	; 0x1cb6 <Minutes_Decrement+0xf8>
	else if (__tmp > 65535)
    1c38:	6f 81       	ldd	r22, Y+7	; 0x07
    1c3a:	78 85       	ldd	r23, Y+8	; 0x08
    1c3c:	89 85       	ldd	r24, Y+9	; 0x09
    1c3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	3f ef       	ldi	r19, 0xFF	; 255
    1c44:	4f e7       	ldi	r20, 0x7F	; 127
    1c46:	57 e4       	ldi	r21, 0x47	; 71
    1c48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c4c:	18 16       	cp	r1, r24
    1c4e:	4c f5       	brge	.+82     	; 0x1ca2 <Minutes_Decrement+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c50:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c52:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c54:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c56:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	40 e2       	ldi	r20, 0x20	; 32
    1c5e:	51 e4       	ldi	r21, 0x41	; 65
    1c60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	bc 01       	movw	r22, r24
    1c6a:	cd 01       	movw	r24, r26
    1c6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	9e 83       	std	Y+6, r25	; 0x06
    1c76:	8d 83       	std	Y+5, r24	; 0x05
    1c78:	0f c0       	rjmp	.+30     	; 0x1c98 <Minutes_Decrement+0xda>
    1c7a:	80 e9       	ldi	r24, 0x90	; 144
    1c7c:	91 e0       	ldi	r25, 0x01	; 1
    1c7e:	9c 83       	std	Y+4, r25	; 0x04
    1c80:	8b 83       	std	Y+3, r24	; 0x03
    1c82:	8b 81       	ldd	r24, Y+3	; 0x03
    1c84:	9c 81       	ldd	r25, Y+4	; 0x04
    1c86:	01 97       	sbiw	r24, 0x01	; 1
    1c88:	f1 f7       	brne	.-4      	; 0x1c86 <Minutes_Decrement+0xc8>
    1c8a:	9c 83       	std	Y+4, r25	; 0x04
    1c8c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c90:	9e 81       	ldd	r25, Y+6	; 0x06
    1c92:	01 97       	sbiw	r24, 0x01	; 1
    1c94:	9e 83       	std	Y+6, r25	; 0x06
    1c96:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c98:	8d 81       	ldd	r24, Y+5	; 0x05
    1c9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c9c:	00 97       	sbiw	r24, 0x00	; 0
    1c9e:	69 f7       	brne	.-38     	; 0x1c7a <Minutes_Decrement+0xbc>
    1ca0:	14 c0       	rjmp	.+40     	; 0x1cca <Minutes_Decrement+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ca2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca4:	78 85       	ldd	r23, Y+8	; 0x08
    1ca6:	89 85       	ldd	r24, Y+9	; 0x09
    1ca8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1caa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	9e 83       	std	Y+6, r25	; 0x06
    1cb4:	8d 83       	std	Y+5, r24	; 0x05
    1cb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cba:	9a 83       	std	Y+2, r25	; 0x02
    1cbc:	89 83       	std	Y+1, r24	; 0x01
    1cbe:	89 81       	ldd	r24, Y+1	; 0x01
    1cc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc2:	01 97       	sbiw	r24, 0x01	; 1
    1cc4:	f1 f7       	brne	.-4      	; 0x1cc2 <Minutes_Decrement+0x104>
    1cc6:	9a 83       	std	Y+2, r25	; 0x02
    1cc8:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(30); //Debounce delay
		if (!(PINB & (1 << PB3))) //Check if button is still pressed
    1cca:	e6 e3       	ldi	r30, 0x36	; 54
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	80 81       	ld	r24, Z
    1cd0:	88 2f       	mov	r24, r24
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	88 70       	andi	r24, 0x08	; 8
    1cd6:	90 70       	andi	r25, 0x00	; 0
    1cd8:	00 97       	sbiw	r24, 0x00	; 0
    1cda:	29 f5       	brne	.+74     	; 0x1d26 <Minutes_Decrement+0x168>
		{
			if(flag_minutes_decrement == 0) //Proceed to decrement minutes only if not already decrementing
    1cdc:	80 91 74 00 	lds	r24, 0x0074
    1ce0:	88 23       	and	r24, r24
    1ce2:	09 f5       	brne	.+66     	; 0x1d26 <Minutes_Decrement+0x168>
			{
				if(minutes_unit == 0) //Check minutes unit if equal zero
    1ce4:	80 91 6c 00 	lds	r24, 0x006C
    1ce8:	88 23       	and	r24, r24
    1cea:	91 f4       	brne	.+36     	; 0x1d10 <Minutes_Decrement+0x152>
				{
					minutes_unit = 9; //Set minutes unit to 9
    1cec:	89 e0       	ldi	r24, 0x09	; 9
    1cee:	80 93 6c 00 	sts	0x006C, r24
					if(minutes_ten == 0) //Check minutes ten if equal zero
    1cf2:	80 91 6d 00 	lds	r24, 0x006D
    1cf6:	88 23       	and	r24, r24
    1cf8:	29 f4       	brne	.+10     	; 0x1d04 <Minutes_Decrement+0x146>
					{
						minutes_unit=0; //Set minutes unit to 0
    1cfa:	10 92 6c 00 	sts	0x006C, r1
						minutes_ten=0; //Set minutes ten to 0
    1cfe:	10 92 6d 00 	sts	0x006D, r1
    1d02:	0b c0       	rjmp	.+22     	; 0x1d1a <Minutes_Decrement+0x15c>
					}
					else
					{
						minutes_ten--; //Decrement minutes ten
    1d04:	80 91 6d 00 	lds	r24, 0x006D
    1d08:	81 50       	subi	r24, 0x01	; 1
    1d0a:	80 93 6d 00 	sts	0x006D, r24
    1d0e:	05 c0       	rjmp	.+10     	; 0x1d1a <Minutes_Decrement+0x15c>
					}
				}
				else
				{
					minutes_unit--; //Decrement minutes unit
    1d10:	80 91 6c 00 	lds	r24, 0x006C
    1d14:	81 50       	subi	r24, 0x01	; 1
    1d16:	80 93 6c 00 	sts	0x006C, r24
				}
				flag_minutes_decrement = 1; //Set the flag to indicate that minutes have been decremented
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	80 93 74 00 	sts	0x0074, r24
    1d20:	02 c0       	rjmp	.+4      	; 0x1d26 <Minutes_Decrement+0x168>
		}

	}
	else
	{
		flag_minutes_decrement = 0; //Reset the decrement flag if the button is not pressed
    1d22:	10 92 74 00 	sts	0x0074, r1
	}
}
    1d26:	2e 96       	adiw	r28, 0x0e	; 14
    1d28:	0f b6       	in	r0, 0x3f	; 63
    1d2a:	f8 94       	cli
    1d2c:	de bf       	out	0x3e, r29	; 62
    1d2e:	0f be       	out	0x3f, r0	; 63
    1d30:	cd bf       	out	0x3d, r28	; 61
    1d32:	cf 91       	pop	r28
    1d34:	df 91       	pop	r29
    1d36:	08 95       	ret

00001d38 <Seconds_Decrement>:

void Seconds_Decrement(void)
{
    1d38:	df 93       	push	r29
    1d3a:	cf 93       	push	r28
    1d3c:	cd b7       	in	r28, 0x3d	; 61
    1d3e:	de b7       	in	r29, 0x3e	; 62
    1d40:	2e 97       	sbiw	r28, 0x0e	; 14
    1d42:	0f b6       	in	r0, 0x3f	; 63
    1d44:	f8 94       	cli
    1d46:	de bf       	out	0x3e, r29	; 62
    1d48:	0f be       	out	0x3f, r0	; 63
    1d4a:	cd bf       	out	0x3d, r28	; 61
	if (!(PINB & (1 << PB5))) //Check if button is pressed (active low)
    1d4c:	e6 e3       	ldi	r30, 0x36	; 54
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	80 81       	ld	r24, Z
    1d52:	88 2f       	mov	r24, r24
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	80 72       	andi	r24, 0x20	; 32
    1d58:	90 70       	andi	r25, 0x00	; 0
    1d5a:	00 97       	sbiw	r24, 0x00	; 0
    1d5c:	09 f0       	breq	.+2      	; 0x1d60 <Seconds_Decrement+0x28>
    1d5e:	9e c0       	rjmp	.+316    	; 0x1e9c <Seconds_Decrement+0x164>
    1d60:	80 e0       	ldi	r24, 0x00	; 0
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	a0 ef       	ldi	r26, 0xF0	; 240
    1d66:	b1 e4       	ldi	r27, 0x41	; 65
    1d68:	8b 87       	std	Y+11, r24	; 0x0b
    1d6a:	9c 87       	std	Y+12, r25	; 0x0c
    1d6c:	ad 87       	std	Y+13, r26	; 0x0d
    1d6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d70:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d72:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d74:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d76:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d78:	20 e0       	ldi	r18, 0x00	; 0
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	4a e7       	ldi	r20, 0x7A	; 122
    1d7e:	55 e4       	ldi	r21, 0x45	; 69
    1d80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d84:	dc 01       	movw	r26, r24
    1d86:	cb 01       	movw	r24, r22
    1d88:	8f 83       	std	Y+7, r24	; 0x07
    1d8a:	98 87       	std	Y+8, r25	; 0x08
    1d8c:	a9 87       	std	Y+9, r26	; 0x09
    1d8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d90:	6f 81       	ldd	r22, Y+7	; 0x07
    1d92:	78 85       	ldd	r23, Y+8	; 0x08
    1d94:	89 85       	ldd	r24, Y+9	; 0x09
    1d96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	40 e8       	ldi	r20, 0x80	; 128
    1d9e:	5f e3       	ldi	r21, 0x3F	; 63
    1da0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1da4:	88 23       	and	r24, r24
    1da6:	2c f4       	brge	.+10     	; 0x1db2 <Seconds_Decrement+0x7a>
		__ticks = 1;
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	9e 83       	std	Y+6, r25	; 0x06
    1dae:	8d 83       	std	Y+5, r24	; 0x05
    1db0:	3f c0       	rjmp	.+126    	; 0x1e30 <Seconds_Decrement+0xf8>
	else if (__tmp > 65535)
    1db2:	6f 81       	ldd	r22, Y+7	; 0x07
    1db4:	78 85       	ldd	r23, Y+8	; 0x08
    1db6:	89 85       	ldd	r24, Y+9	; 0x09
    1db8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	3f ef       	ldi	r19, 0xFF	; 255
    1dbe:	4f e7       	ldi	r20, 0x7F	; 127
    1dc0:	57 e4       	ldi	r21, 0x47	; 71
    1dc2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dc6:	18 16       	cp	r1, r24
    1dc8:	4c f5       	brge	.+82     	; 0x1e1c <Seconds_Decrement+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dca:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dce:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	40 e2       	ldi	r20, 0x20	; 32
    1dd8:	51 e4       	ldi	r21, 0x41	; 65
    1dda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	bc 01       	movw	r22, r24
    1de4:	cd 01       	movw	r24, r26
    1de6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	9e 83       	std	Y+6, r25	; 0x06
    1df0:	8d 83       	std	Y+5, r24	; 0x05
    1df2:	0f c0       	rjmp	.+30     	; 0x1e12 <Seconds_Decrement+0xda>
    1df4:	80 e9       	ldi	r24, 0x90	; 144
    1df6:	91 e0       	ldi	r25, 0x01	; 1
    1df8:	9c 83       	std	Y+4, r25	; 0x04
    1dfa:	8b 83       	std	Y+3, r24	; 0x03
    1dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1e00:	01 97       	sbiw	r24, 0x01	; 1
    1e02:	f1 f7       	brne	.-4      	; 0x1e00 <Seconds_Decrement+0xc8>
    1e04:	9c 83       	std	Y+4, r25	; 0x04
    1e06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e08:	8d 81       	ldd	r24, Y+5	; 0x05
    1e0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e0c:	01 97       	sbiw	r24, 0x01	; 1
    1e0e:	9e 83       	std	Y+6, r25	; 0x06
    1e10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e12:	8d 81       	ldd	r24, Y+5	; 0x05
    1e14:	9e 81       	ldd	r25, Y+6	; 0x06
    1e16:	00 97       	sbiw	r24, 0x00	; 0
    1e18:	69 f7       	brne	.-38     	; 0x1df4 <Seconds_Decrement+0xbc>
    1e1a:	14 c0       	rjmp	.+40     	; 0x1e44 <Seconds_Decrement+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e1e:	78 85       	ldd	r23, Y+8	; 0x08
    1e20:	89 85       	ldd	r24, Y+9	; 0x09
    1e22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e28:	dc 01       	movw	r26, r24
    1e2a:	cb 01       	movw	r24, r22
    1e2c:	9e 83       	std	Y+6, r25	; 0x06
    1e2e:	8d 83       	std	Y+5, r24	; 0x05
    1e30:	8d 81       	ldd	r24, Y+5	; 0x05
    1e32:	9e 81       	ldd	r25, Y+6	; 0x06
    1e34:	9a 83       	std	Y+2, r25	; 0x02
    1e36:	89 83       	std	Y+1, r24	; 0x01
    1e38:	89 81       	ldd	r24, Y+1	; 0x01
    1e3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e3c:	01 97       	sbiw	r24, 0x01	; 1
    1e3e:	f1 f7       	brne	.-4      	; 0x1e3c <Seconds_Decrement+0x104>
    1e40:	9a 83       	std	Y+2, r25	; 0x02
    1e42:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(30); //Debounce delay
		if (!(PINB & (1 << PB5))) //Check if button is still pressed
    1e44:	e6 e3       	ldi	r30, 0x36	; 54
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	80 81       	ld	r24, Z
    1e4a:	88 2f       	mov	r24, r24
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	80 72       	andi	r24, 0x20	; 32
    1e50:	90 70       	andi	r25, 0x00	; 0
    1e52:	00 97       	sbiw	r24, 0x00	; 0
    1e54:	29 f5       	brne	.+74     	; 0x1ea0 <Seconds_Decrement+0x168>
		{
			if(flag_seconds_decrement == 0) //Proceed to decrement seconds only if not already decrementing
    1e56:	80 91 75 00 	lds	r24, 0x0075
    1e5a:	88 23       	and	r24, r24
    1e5c:	09 f5       	brne	.+66     	; 0x1ea0 <Seconds_Decrement+0x168>
			{
				if(seconds_unit == 0) //Check seconds unit if equal zero
    1e5e:	80 91 6a 00 	lds	r24, 0x006A
    1e62:	88 23       	and	r24, r24
    1e64:	91 f4       	brne	.+36     	; 0x1e8a <Seconds_Decrement+0x152>
				{
					seconds_unit = 9; //Set seconds unit to 9
    1e66:	89 e0       	ldi	r24, 0x09	; 9
    1e68:	80 93 6a 00 	sts	0x006A, r24
					if(seconds_ten == 0) //Check seconds ten if equal zero
    1e6c:	80 91 6b 00 	lds	r24, 0x006B
    1e70:	88 23       	and	r24, r24
    1e72:	29 f4       	brne	.+10     	; 0x1e7e <Seconds_Decrement+0x146>
					{
						seconds_unit=0; //Set seconds unit to 0
    1e74:	10 92 6a 00 	sts	0x006A, r1
						seconds_ten=0; //Set seconds ten to 0
    1e78:	10 92 6b 00 	sts	0x006B, r1
    1e7c:	0b c0       	rjmp	.+22     	; 0x1e94 <Seconds_Decrement+0x15c>
					}
					else
					{
						seconds_ten--; //Decrement seconds ten
    1e7e:	80 91 6b 00 	lds	r24, 0x006B
    1e82:	81 50       	subi	r24, 0x01	; 1
    1e84:	80 93 6b 00 	sts	0x006B, r24
    1e88:	05 c0       	rjmp	.+10     	; 0x1e94 <Seconds_Decrement+0x15c>
					}
				}
				else
				{
					seconds_unit--; //Decrement seconds unit
    1e8a:	80 91 6a 00 	lds	r24, 0x006A
    1e8e:	81 50       	subi	r24, 0x01	; 1
    1e90:	80 93 6a 00 	sts	0x006A, r24
				}
				flag_seconds_decrement = 1; //Set the flag to indicate that seconds have been decremented
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	80 93 75 00 	sts	0x0075, r24
    1e9a:	02 c0       	rjmp	.+4      	; 0x1ea0 <Seconds_Decrement+0x168>
		}

	}
	else
	{
		flag_seconds_decrement = 0; //Reset the decrement flag if the button is not pressed
    1e9c:	10 92 75 00 	sts	0x0075, r1
	}
}
    1ea0:	2e 96       	adiw	r28, 0x0e	; 14
    1ea2:	0f b6       	in	r0, 0x3f	; 63
    1ea4:	f8 94       	cli
    1ea6:	de bf       	out	0x3e, r29	; 62
    1ea8:	0f be       	out	0x3f, r0	; 63
    1eaa:	cd bf       	out	0x3d, r28	; 61
    1eac:	cf 91       	pop	r28
    1eae:	df 91       	pop	r29
    1eb0:	08 95       	ret

00001eb2 <Toggle>:

void Toggle(void)
{
    1eb2:	df 93       	push	r29
    1eb4:	cf 93       	push	r28
    1eb6:	cd b7       	in	r28, 0x3d	; 61
    1eb8:	de b7       	in	r29, 0x3e	; 62
    1eba:	2f 97       	sbiw	r28, 0x0f	; 15
    1ebc:	0f b6       	in	r0, 0x3f	; 63
    1ebe:	f8 94       	cli
    1ec0:	de bf       	out	0x3e, r29	; 62
    1ec2:	0f be       	out	0x3f, r0	; 63
    1ec4:	cd bf       	out	0x3d, r28	; 61
	if (!(PINB & (1 << PB7))) //Check if button is pressed (active low)
    1ec6:	e6 e3       	ldi	r30, 0x36	; 54
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	80 81       	ld	r24, Z
    1ecc:	88 23       	and	r24, r24
    1ece:	0c f4       	brge	.+2      	; 0x1ed2 <Toggle+0x20>
    1ed0:	89 c0       	rjmp	.+274    	; 0x1fe4 <Toggle+0x132>
    1ed2:	80 e0       	ldi	r24, 0x00	; 0
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	a0 ef       	ldi	r26, 0xF0	; 240
    1ed8:	b1 e4       	ldi	r27, 0x41	; 65
    1eda:	8b 87       	std	Y+11, r24	; 0x0b
    1edc:	9c 87       	std	Y+12, r25	; 0x0c
    1ede:	ad 87       	std	Y+13, r26	; 0x0d
    1ee0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ee2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ee4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ee6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ee8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	4a e7       	ldi	r20, 0x7A	; 122
    1ef0:	55 e4       	ldi	r21, 0x45	; 69
    1ef2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	cb 01       	movw	r24, r22
    1efa:	8f 83       	std	Y+7, r24	; 0x07
    1efc:	98 87       	std	Y+8, r25	; 0x08
    1efe:	a9 87       	std	Y+9, r26	; 0x09
    1f00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f02:	6f 81       	ldd	r22, Y+7	; 0x07
    1f04:	78 85       	ldd	r23, Y+8	; 0x08
    1f06:	89 85       	ldd	r24, Y+9	; 0x09
    1f08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	40 e8       	ldi	r20, 0x80	; 128
    1f10:	5f e3       	ldi	r21, 0x3F	; 63
    1f12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f16:	88 23       	and	r24, r24
    1f18:	2c f4       	brge	.+10     	; 0x1f24 <Toggle+0x72>
		__ticks = 1;
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	9e 83       	std	Y+6, r25	; 0x06
    1f20:	8d 83       	std	Y+5, r24	; 0x05
    1f22:	3f c0       	rjmp	.+126    	; 0x1fa2 <Toggle+0xf0>
	else if (__tmp > 65535)
    1f24:	6f 81       	ldd	r22, Y+7	; 0x07
    1f26:	78 85       	ldd	r23, Y+8	; 0x08
    1f28:	89 85       	ldd	r24, Y+9	; 0x09
    1f2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	3f ef       	ldi	r19, 0xFF	; 255
    1f30:	4f e7       	ldi	r20, 0x7F	; 127
    1f32:	57 e4       	ldi	r21, 0x47	; 71
    1f34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f38:	18 16       	cp	r1, r24
    1f3a:	4c f5       	brge	.+82     	; 0x1f8e <Toggle+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f44:	20 e0       	ldi	r18, 0x00	; 0
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	40 e2       	ldi	r20, 0x20	; 32
    1f4a:	51 e4       	ldi	r21, 0x41	; 65
    1f4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f50:	dc 01       	movw	r26, r24
    1f52:	cb 01       	movw	r24, r22
    1f54:	bc 01       	movw	r22, r24
    1f56:	cd 01       	movw	r24, r26
    1f58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f5c:	dc 01       	movw	r26, r24
    1f5e:	cb 01       	movw	r24, r22
    1f60:	9e 83       	std	Y+6, r25	; 0x06
    1f62:	8d 83       	std	Y+5, r24	; 0x05
    1f64:	0f c0       	rjmp	.+30     	; 0x1f84 <Toggle+0xd2>
    1f66:	80 e9       	ldi	r24, 0x90	; 144
    1f68:	91 e0       	ldi	r25, 0x01	; 1
    1f6a:	9c 83       	std	Y+4, r25	; 0x04
    1f6c:	8b 83       	std	Y+3, r24	; 0x03
    1f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f70:	9c 81       	ldd	r25, Y+4	; 0x04
    1f72:	01 97       	sbiw	r24, 0x01	; 1
    1f74:	f1 f7       	brne	.-4      	; 0x1f72 <Toggle+0xc0>
    1f76:	9c 83       	std	Y+4, r25	; 0x04
    1f78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f7e:	01 97       	sbiw	r24, 0x01	; 1
    1f80:	9e 83       	std	Y+6, r25	; 0x06
    1f82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f84:	8d 81       	ldd	r24, Y+5	; 0x05
    1f86:	9e 81       	ldd	r25, Y+6	; 0x06
    1f88:	00 97       	sbiw	r24, 0x00	; 0
    1f8a:	69 f7       	brne	.-38     	; 0x1f66 <Toggle+0xb4>
    1f8c:	14 c0       	rjmp	.+40     	; 0x1fb6 <Toggle+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f90:	78 85       	ldd	r23, Y+8	; 0x08
    1f92:	89 85       	ldd	r24, Y+9	; 0x09
    1f94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f9a:	dc 01       	movw	r26, r24
    1f9c:	cb 01       	movw	r24, r22
    1f9e:	9e 83       	std	Y+6, r25	; 0x06
    1fa0:	8d 83       	std	Y+5, r24	; 0x05
    1fa2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa6:	9a 83       	std	Y+2, r25	; 0x02
    1fa8:	89 83       	std	Y+1, r24	; 0x01
    1faa:	89 81       	ldd	r24, Y+1	; 0x01
    1fac:	9a 81       	ldd	r25, Y+2	; 0x02
    1fae:	01 97       	sbiw	r24, 0x01	; 1
    1fb0:	f1 f7       	brne	.-4      	; 0x1fae <Toggle+0xfc>
    1fb2:	9a 83       	std	Y+2, r25	; 0x02
    1fb4:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(30); //Debounce delay
		if (!(PINB & (1 << PB7))) //Check if button is still pressed
    1fb6:	e6 e3       	ldi	r30, 0x36	; 54
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	80 81       	ld	r24, Z
    1fbc:	88 23       	and	r24, r24
    1fbe:	a4 f0       	brlt	.+40     	; 0x1fe8 <Toggle+0x136>
		{
			if(flag_toggle == 0) //Proceed to toggle only if not already toggled
    1fc0:	80 91 76 00 	lds	r24, 0x0076
    1fc4:	88 23       	and	r24, r24
    1fc6:	81 f4       	brne	.+32     	; 0x1fe8 <Toggle+0x136>
			{
				toggle = !toggle;    // Toggle the value of toggle (0 -> 1 or 1 -> 0)
    1fc8:	80 91 68 00 	lds	r24, 0x0068
    1fcc:	1f 86       	std	Y+15, r1	; 0x0f
    1fce:	88 23       	and	r24, r24
    1fd0:	11 f4       	brne	.+4      	; 0x1fd6 <Toggle+0x124>
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	8f 87       	std	Y+15, r24	; 0x0f
    1fd6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fd8:	80 93 68 00 	sts	0x0068, r24
				flag_toggle = 1; // Set the flag to indicate that toggle has been processed
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	80 93 76 00 	sts	0x0076, r24
    1fe2:	02 c0       	rjmp	.+4      	; 0x1fe8 <Toggle+0x136>
			}
		}
	}
	else
	{
		flag_toggle = 0; //Reset the toggle flag if the button is not pressed
    1fe4:	10 92 76 00 	sts	0x0076, r1
	}
}
    1fe8:	2f 96       	adiw	r28, 0x0f	; 15
    1fea:	0f b6       	in	r0, 0x3f	; 63
    1fec:	f8 94       	cli
    1fee:	de bf       	out	0x3e, r29	; 62
    1ff0:	0f be       	out	0x3f, r0	; 63
    1ff2:	cd bf       	out	0x3d, r28	; 61
    1ff4:	cf 91       	pop	r28
    1ff6:	df 91       	pop	r29
    1ff8:	08 95       	ret

00001ffa <Count_up>:

void Count_up(void)
{
    1ffa:	df 93       	push	r29
    1ffc:	cf 93       	push	r28
    1ffe:	cd b7       	in	r28, 0x3d	; 61
    2000:	de b7       	in	r29, 0x3e	; 62
	Count_up_led(); //Call function to handle LED indication related to counting up
    2002:	0e 94 b8 10 	call	0x2170	; 0x2170 <Count_up_led>
	if(seconds_unit == 9) //Check seconds unit to prevent overflow
    2006:	80 91 6a 00 	lds	r24, 0x006A
    200a:	89 30       	cpi	r24, 0x09	; 9
    200c:	09 f0       	breq	.+2      	; 0x2010 <Count_up+0x16>
    200e:	3f c0       	rjmp	.+126    	; 0x208e <Count_up+0x94>
	{
		seconds_unit = 0; //Reset seconds unit to 0
    2010:	10 92 6a 00 	sts	0x006A, r1
		if(seconds_ten == 5) //Check seconds ten to prevent overflow
    2014:	80 91 6b 00 	lds	r24, 0x006B
    2018:	85 30       	cpi	r24, 0x05	; 5
    201a:	99 f5       	brne	.+102    	; 0x2082 <Count_up+0x88>
		{
			seconds_ten = 0; //Reset seconds ten to 0
    201c:	10 92 6b 00 	sts	0x006B, r1
			if(minutes_unit == 9) //Check minutes unit to prevent overflow
    2020:	80 91 6c 00 	lds	r24, 0x006C
    2024:	89 30       	cpi	r24, 0x09	; 9
    2026:	39 f5       	brne	.+78     	; 0x2076 <Count_up+0x7c>
			{
				minutes_unit = 0; //Reset minutes unit to 0
    2028:	10 92 6c 00 	sts	0x006C, r1
				if(minutes_ten == 5 ) //Check minutes ten to prevent overflow
    202c:	80 91 6d 00 	lds	r24, 0x006D
    2030:	85 30       	cpi	r24, 0x05	; 5
    2032:	d9 f4       	brne	.+54     	; 0x206a <Count_up+0x70>
				{
					minutes_ten = 0; //Reset minutes ten to 0
    2034:	10 92 6d 00 	sts	0x006D, r1
					if(hours_unit == 9) //Check hours unit to prevent overflow
    2038:	80 91 6e 00 	lds	r24, 0x006E
    203c:	89 30       	cpi	r24, 0x09	; 9
    203e:	79 f4       	brne	.+30     	; 0x205e <Count_up+0x64>
					{
						hours_unit = 0; //Reset hours unit to 0
    2040:	10 92 6e 00 	sts	0x006E, r1
						if(hours_ten == 9) //Check hours ten to prevent overflow
    2044:	80 91 6f 00 	lds	r24, 0x006F
    2048:	89 30       	cpi	r24, 0x09	; 9
    204a:	19 f4       	brne	.+6      	; 0x2052 <Count_up+0x58>
						{
							hours_ten = 0; //Reset hours ten to 0
    204c:	10 92 6f 00 	sts	0x006F, r1
    2050:	23 c0       	rjmp	.+70     	; 0x2098 <Count_up+0x9e>
						}
						else
						{
							hours_ten++;  //Increment hours ten
    2052:	80 91 6f 00 	lds	r24, 0x006F
    2056:	8f 5f       	subi	r24, 0xFF	; 255
    2058:	80 93 6f 00 	sts	0x006F, r24
    205c:	1d c0       	rjmp	.+58     	; 0x2098 <Count_up+0x9e>
						}
					}
					else
					{
						hours_unit++; //Increment hours unit
    205e:	80 91 6e 00 	lds	r24, 0x006E
    2062:	8f 5f       	subi	r24, 0xFF	; 255
    2064:	80 93 6e 00 	sts	0x006E, r24
    2068:	17 c0       	rjmp	.+46     	; 0x2098 <Count_up+0x9e>
					}
				}
				else
				{
					minutes_ten++; //Increment minutes ten
    206a:	80 91 6d 00 	lds	r24, 0x006D
    206e:	8f 5f       	subi	r24, 0xFF	; 255
    2070:	80 93 6d 00 	sts	0x006D, r24
    2074:	11 c0       	rjmp	.+34     	; 0x2098 <Count_up+0x9e>
				}
			}
			else
			{
				minutes_unit++; //Increment minutes unit
    2076:	80 91 6c 00 	lds	r24, 0x006C
    207a:	8f 5f       	subi	r24, 0xFF	; 255
    207c:	80 93 6c 00 	sts	0x006C, r24
    2080:	0b c0       	rjmp	.+22     	; 0x2098 <Count_up+0x9e>
			}
		}
		else
		{
			seconds_ten++; //Increment seconds ten
    2082:	80 91 6b 00 	lds	r24, 0x006B
    2086:	8f 5f       	subi	r24, 0xFF	; 255
    2088:	80 93 6b 00 	sts	0x006B, r24
    208c:	05 c0       	rjmp	.+10     	; 0x2098 <Count_up+0x9e>
		}
	}
	else
	{
		seconds_unit++; //Increment seconds unit
    208e:	80 91 6a 00 	lds	r24, 0x006A
    2092:	8f 5f       	subi	r24, 0xFF	; 255
    2094:	80 93 6a 00 	sts	0x006A, r24
	}
}
    2098:	cf 91       	pop	r28
    209a:	df 91       	pop	r29
    209c:	08 95       	ret

0000209e <Count_down>:

void Count_down(void)
{
    209e:	df 93       	push	r29
    20a0:	cf 93       	push	r28
    20a2:	cd b7       	in	r28, 0x3d	; 61
    20a4:	de b7       	in	r29, 0x3e	; 62
	Count_down_led(); //Call function to handle LED indication related to counting down
    20a6:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <Count_down_led>
	if(seconds_unit == 0) //Check seconds unit
    20aa:	80 91 6a 00 	lds	r24, 0x006A
    20ae:	88 23       	and	r24, r24
    20b0:	09 f0       	breq	.+2      	; 0x20b4 <Count_down+0x16>
    20b2:	56 c0       	rjmp	.+172    	; 0x2160 <Count_down+0xc2>
	{
		seconds_unit = 9; //Set seconds unit to 9
    20b4:	89 e0       	ldi	r24, 0x09	; 9
    20b6:	80 93 6a 00 	sts	0x006A, r24
		if(seconds_ten == 0) //Check seconds ten
    20ba:	80 91 6b 00 	lds	r24, 0x006B
    20be:	88 23       	and	r24, r24
    20c0:	09 f0       	breq	.+2      	; 0x20c4 <Count_down+0x26>
    20c2:	48 c0       	rjmp	.+144    	; 0x2154 <Count_down+0xb6>
		{
			seconds_ten = 5; //Set seconds ten to 5
    20c4:	85 e0       	ldi	r24, 0x05	; 5
    20c6:	80 93 6b 00 	sts	0x006B, r24
			if(minutes_unit == 0) //Check minutes unit
    20ca:	80 91 6c 00 	lds	r24, 0x006C
    20ce:	88 23       	and	r24, r24
    20d0:	d9 f5       	brne	.+118    	; 0x2148 <Count_down+0xaa>
			{
				minutes_unit = 9; //Set minutes unit to 9
    20d2:	89 e0       	ldi	r24, 0x09	; 9
    20d4:	80 93 6c 00 	sts	0x006C, r24
				if(minutes_ten == 0 ) //Check minutes ten
    20d8:	80 91 6d 00 	lds	r24, 0x006D
    20dc:	88 23       	and	r24, r24
    20de:	71 f5       	brne	.+92     	; 0x213c <Count_down+0x9e>
				{
					minutes_ten = 5; //Set minutes ten to 5
    20e0:	85 e0       	ldi	r24, 0x05	; 5
    20e2:	80 93 6d 00 	sts	0x006D, r24
					if(hours_unit == 0) //Check hours unit
    20e6:	80 91 6e 00 	lds	r24, 0x006E
    20ea:	88 23       	and	r24, r24
    20ec:	09 f5       	brne	.+66     	; 0x2130 <Count_down+0x92>
					{
						hours_unit = 9; //Set hours unit to 9
    20ee:	89 e0       	ldi	r24, 0x09	; 9
    20f0:	80 93 6e 00 	sts	0x006E, r24
						if(hours_ten == 0) //Check hours ten
    20f4:	80 91 6f 00 	lds	r24, 0x006F
    20f8:	88 23       	and	r24, r24
    20fa:	a1 f4       	brne	.+40     	; 0x2124 <Count_down+0x86>
						{
							hours_ten = 0; //Reset hours ten to 0
    20fc:	10 92 6f 00 	sts	0x006F, r1
							hours_unit = 0; //Reset hours unit to 0
    2100:	10 92 6e 00 	sts	0x006E, r1
							minutes_ten = 0; //Reset minutes ten to 0
    2104:	10 92 6d 00 	sts	0x006D, r1
							minutes_unit = 0; //Reset minutes unit to 0
    2108:	10 92 6c 00 	sts	0x006C, r1
							seconds_ten = 0; //Reset seconds ten to 0
    210c:	10 92 6b 00 	sts	0x006B, r1
							seconds_unit = 0; //Reset seconds unit to 0
    2110:	10 92 6a 00 	sts	0x006A, r1
							PORTD |= (1<<PD0); //Set the PD0 bit to turn on the LED and Buzzer
    2114:	a2 e3       	ldi	r26, 0x32	; 50
    2116:	b0 e0       	ldi	r27, 0x00	; 0
    2118:	e2 e3       	ldi	r30, 0x32	; 50
    211a:	f0 e0       	ldi	r31, 0x00	; 0
    211c:	80 81       	ld	r24, Z
    211e:	81 60       	ori	r24, 0x01	; 1
    2120:	8c 93       	st	X, r24
    2122:	23 c0       	rjmp	.+70     	; 0x216a <Count_down+0xcc>
						}
						else
						{
							hours_ten--; //Decrement hours ten
    2124:	80 91 6f 00 	lds	r24, 0x006F
    2128:	81 50       	subi	r24, 0x01	; 1
    212a:	80 93 6f 00 	sts	0x006F, r24
    212e:	1d c0       	rjmp	.+58     	; 0x216a <Count_down+0xcc>
						}
					}
					else
					{
						hours_unit--; //Decrement hours unit
    2130:	80 91 6e 00 	lds	r24, 0x006E
    2134:	81 50       	subi	r24, 0x01	; 1
    2136:	80 93 6e 00 	sts	0x006E, r24
    213a:	17 c0       	rjmp	.+46     	; 0x216a <Count_down+0xcc>
					}
				}
				else
				{
					minutes_ten--; //Decrement minutes ten
    213c:	80 91 6d 00 	lds	r24, 0x006D
    2140:	81 50       	subi	r24, 0x01	; 1
    2142:	80 93 6d 00 	sts	0x006D, r24
    2146:	11 c0       	rjmp	.+34     	; 0x216a <Count_down+0xcc>
				}
			}
			else
			{
				minutes_unit--; //Decrement minutes unit
    2148:	80 91 6c 00 	lds	r24, 0x006C
    214c:	81 50       	subi	r24, 0x01	; 1
    214e:	80 93 6c 00 	sts	0x006C, r24
    2152:	0b c0       	rjmp	.+22     	; 0x216a <Count_down+0xcc>
			}
		}
		else
		{
			seconds_ten--; //Decrement seconds ten
    2154:	80 91 6b 00 	lds	r24, 0x006B
    2158:	81 50       	subi	r24, 0x01	; 1
    215a:	80 93 6b 00 	sts	0x006B, r24
    215e:	05 c0       	rjmp	.+10     	; 0x216a <Count_down+0xcc>
		}
	}
	else
	{
		seconds_unit--; //Decrement seconds unit
    2160:	80 91 6a 00 	lds	r24, 0x006A
    2164:	81 50       	subi	r24, 0x01	; 1
    2166:	80 93 6a 00 	sts	0x006A, r24
	}
}
    216a:	cf 91       	pop	r28
    216c:	df 91       	pop	r29
    216e:	08 95       	ret

00002170 <Count_up_led>:

void Count_up_led(void)
{
    2170:	df 93       	push	r29
    2172:	cf 93       	push	r28
    2174:	cd b7       	in	r28, 0x3d	; 61
    2176:	de b7       	in	r29, 0x3e	; 62
	PORTD &=~ (1<<PD5); //Clear the PD5 bit to turn off the LED
    2178:	a2 e3       	ldi	r26, 0x32	; 50
    217a:	b0 e0       	ldi	r27, 0x00	; 0
    217c:	e2 e3       	ldi	r30, 0x32	; 50
    217e:	f0 e0       	ldi	r31, 0x00	; 0
    2180:	80 81       	ld	r24, Z
    2182:	8f 7d       	andi	r24, 0xDF	; 223
    2184:	8c 93       	st	X, r24
	PORTD |= (1<<PD4); //Set the PD4 bit to turn on the LED
    2186:	a2 e3       	ldi	r26, 0x32	; 50
    2188:	b0 e0       	ldi	r27, 0x00	; 0
    218a:	e2 e3       	ldi	r30, 0x32	; 50
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	80 81       	ld	r24, Z
    2190:	80 61       	ori	r24, 0x10	; 16
    2192:	8c 93       	st	X, r24
	PORTD &=~ (1<<PD0); //Clear the PD0 bit to turn off the LED
    2194:	a2 e3       	ldi	r26, 0x32	; 50
    2196:	b0 e0       	ldi	r27, 0x00	; 0
    2198:	e2 e3       	ldi	r30, 0x32	; 50
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	80 81       	ld	r24, Z
    219e:	8e 7f       	andi	r24, 0xFE	; 254
    21a0:	8c 93       	st	X, r24
}
    21a2:	cf 91       	pop	r28
    21a4:	df 91       	pop	r29
    21a6:	08 95       	ret

000021a8 <Count_down_led>:

void Count_down_led(void)
{
    21a8:	df 93       	push	r29
    21aa:	cf 93       	push	r28
    21ac:	cd b7       	in	r28, 0x3d	; 61
    21ae:	de b7       	in	r29, 0x3e	; 62
	PORTD |= (1<<PD5); //Set the PD5 bit to turn off the LED
    21b0:	a2 e3       	ldi	r26, 0x32	; 50
    21b2:	b0 e0       	ldi	r27, 0x00	; 0
    21b4:	e2 e3       	ldi	r30, 0x32	; 50
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	80 81       	ld	r24, Z
    21ba:	80 62       	ori	r24, 0x20	; 32
    21bc:	8c 93       	st	X, r24
	PORTD &=~ (1<<PD4); //Clear the PD4 bit to turn on the LED
    21be:	a2 e3       	ldi	r26, 0x32	; 50
    21c0:	b0 e0       	ldi	r27, 0x00	; 0
    21c2:	e2 e3       	ldi	r30, 0x32	; 50
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	80 81       	ld	r24, Z
    21c8:	8f 7e       	andi	r24, 0xEF	; 239
    21ca:	8c 93       	st	X, r24
	PORTD &=~ (1<<PD0); //Clear the PD0 bit to turn off the LED
    21cc:	a2 e3       	ldi	r26, 0x32	; 50
    21ce:	b0 e0       	ldi	r27, 0x00	; 0
    21d0:	e2 e3       	ldi	r30, 0x32	; 50
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	80 81       	ld	r24, Z
    21d6:	8e 7f       	andi	r24, 0xFE	; 254
    21d8:	8c 93       	st	X, r24
}
    21da:	cf 91       	pop	r28
    21dc:	df 91       	pop	r29
    21de:	08 95       	ret

000021e0 <Toggle_LED>:

void Toggle_LED(void)
{
    21e0:	df 93       	push	r29
    21e2:	cf 93       	push	r28
    21e4:	cd b7       	in	r28, 0x3d	; 61
    21e6:	de b7       	in	r29, 0x3e	; 62
    21e8:	2e 97       	sbiw	r28, 0x0e	; 14
    21ea:	0f b6       	in	r0, 0x3f	; 63
    21ec:	f8 94       	cli
    21ee:	de bf       	out	0x3e, r29	; 62
    21f0:	0f be       	out	0x3f, r0	; 63
    21f2:	cd bf       	out	0x3d, r28	; 61
	if (!(PINB & (1 << PB7))) //Check if button is pressed (active low)
    21f4:	e6 e3       	ldi	r30, 0x36	; 54
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	80 81       	ld	r24, Z
    21fa:	88 23       	and	r24, r24
    21fc:	0c f4       	brge	.+2      	; 0x2200 <Toggle_LED+0x20>
    21fe:	82 c0       	rjmp	.+260    	; 0x2304 <Toggle_LED+0x124>
    2200:	80 e0       	ldi	r24, 0x00	; 0
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	a0 e2       	ldi	r26, 0x20	; 32
    2206:	b1 e4       	ldi	r27, 0x41	; 65
    2208:	8b 87       	std	Y+11, r24	; 0x0b
    220a:	9c 87       	std	Y+12, r25	; 0x0c
    220c:	ad 87       	std	Y+13, r26	; 0x0d
    220e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2210:	6b 85       	ldd	r22, Y+11	; 0x0b
    2212:	7c 85       	ldd	r23, Y+12	; 0x0c
    2214:	8d 85       	ldd	r24, Y+13	; 0x0d
    2216:	9e 85       	ldd	r25, Y+14	; 0x0e
    2218:	20 e0       	ldi	r18, 0x00	; 0
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	4a e7       	ldi	r20, 0x7A	; 122
    221e:	55 e4       	ldi	r21, 0x45	; 69
    2220:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2224:	dc 01       	movw	r26, r24
    2226:	cb 01       	movw	r24, r22
    2228:	8f 83       	std	Y+7, r24	; 0x07
    222a:	98 87       	std	Y+8, r25	; 0x08
    222c:	a9 87       	std	Y+9, r26	; 0x09
    222e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2230:	6f 81       	ldd	r22, Y+7	; 0x07
    2232:	78 85       	ldd	r23, Y+8	; 0x08
    2234:	89 85       	ldd	r24, Y+9	; 0x09
    2236:	9a 85       	ldd	r25, Y+10	; 0x0a
    2238:	20 e0       	ldi	r18, 0x00	; 0
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	40 e8       	ldi	r20, 0x80	; 128
    223e:	5f e3       	ldi	r21, 0x3F	; 63
    2240:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2244:	88 23       	and	r24, r24
    2246:	2c f4       	brge	.+10     	; 0x2252 <Toggle_LED+0x72>
		__ticks = 1;
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	9e 83       	std	Y+6, r25	; 0x06
    224e:	8d 83       	std	Y+5, r24	; 0x05
    2250:	3f c0       	rjmp	.+126    	; 0x22d0 <Toggle_LED+0xf0>
	else if (__tmp > 65535)
    2252:	6f 81       	ldd	r22, Y+7	; 0x07
    2254:	78 85       	ldd	r23, Y+8	; 0x08
    2256:	89 85       	ldd	r24, Y+9	; 0x09
    2258:	9a 85       	ldd	r25, Y+10	; 0x0a
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	3f ef       	ldi	r19, 0xFF	; 255
    225e:	4f e7       	ldi	r20, 0x7F	; 127
    2260:	57 e4       	ldi	r21, 0x47	; 71
    2262:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2266:	18 16       	cp	r1, r24
    2268:	4c f5       	brge	.+82     	; 0x22bc <Toggle_LED+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    226a:	6b 85       	ldd	r22, Y+11	; 0x0b
    226c:	7c 85       	ldd	r23, Y+12	; 0x0c
    226e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2270:	9e 85       	ldd	r25, Y+14	; 0x0e
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	40 e2       	ldi	r20, 0x20	; 32
    2278:	51 e4       	ldi	r21, 0x41	; 65
    227a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	bc 01       	movw	r22, r24
    2284:	cd 01       	movw	r24, r26
    2286:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    228a:	dc 01       	movw	r26, r24
    228c:	cb 01       	movw	r24, r22
    228e:	9e 83       	std	Y+6, r25	; 0x06
    2290:	8d 83       	std	Y+5, r24	; 0x05
    2292:	0f c0       	rjmp	.+30     	; 0x22b2 <Toggle_LED+0xd2>
    2294:	80 e9       	ldi	r24, 0x90	; 144
    2296:	91 e0       	ldi	r25, 0x01	; 1
    2298:	9c 83       	std	Y+4, r25	; 0x04
    229a:	8b 83       	std	Y+3, r24	; 0x03
    229c:	8b 81       	ldd	r24, Y+3	; 0x03
    229e:	9c 81       	ldd	r25, Y+4	; 0x04
    22a0:	01 97       	sbiw	r24, 0x01	; 1
    22a2:	f1 f7       	brne	.-4      	; 0x22a0 <Toggle_LED+0xc0>
    22a4:	9c 83       	std	Y+4, r25	; 0x04
    22a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22a8:	8d 81       	ldd	r24, Y+5	; 0x05
    22aa:	9e 81       	ldd	r25, Y+6	; 0x06
    22ac:	01 97       	sbiw	r24, 0x01	; 1
    22ae:	9e 83       	std	Y+6, r25	; 0x06
    22b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b2:	8d 81       	ldd	r24, Y+5	; 0x05
    22b4:	9e 81       	ldd	r25, Y+6	; 0x06
    22b6:	00 97       	sbiw	r24, 0x00	; 0
    22b8:	69 f7       	brne	.-38     	; 0x2294 <Toggle_LED+0xb4>
    22ba:	14 c0       	rjmp	.+40     	; 0x22e4 <Toggle_LED+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22bc:	6f 81       	ldd	r22, Y+7	; 0x07
    22be:	78 85       	ldd	r23, Y+8	; 0x08
    22c0:	89 85       	ldd	r24, Y+9	; 0x09
    22c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c8:	dc 01       	movw	r26, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	9e 83       	std	Y+6, r25	; 0x06
    22ce:	8d 83       	std	Y+5, r24	; 0x05
    22d0:	8d 81       	ldd	r24, Y+5	; 0x05
    22d2:	9e 81       	ldd	r25, Y+6	; 0x06
    22d4:	9a 83       	std	Y+2, r25	; 0x02
    22d6:	89 83       	std	Y+1, r24	; 0x01
    22d8:	89 81       	ldd	r24, Y+1	; 0x01
    22da:	9a 81       	ldd	r25, Y+2	; 0x02
    22dc:	01 97       	sbiw	r24, 0x01	; 1
    22de:	f1 f7       	brne	.-4      	; 0x22dc <Toggle_LED+0xfc>
    22e0:	9a 83       	std	Y+2, r25	; 0x02
    22e2:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(10);  //Debounce delay
		if (last_button_state == 0) //Check if button was previously released
    22e4:	80 91 77 00 	lds	r24, 0x0077
    22e8:	88 23       	and	r24, r24
    22ea:	71 f4       	brne	.+28     	; 0x2308 <Toggle_LED+0x128>
		{
			// Toggle LEDs connected to PD4 and PD5
			PORTD ^= (1 << PD4) | (1 << PD5);
    22ec:	a2 e3       	ldi	r26, 0x32	; 50
    22ee:	b0 e0       	ldi	r27, 0x00	; 0
    22f0:	e2 e3       	ldi	r30, 0x32	; 50
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	90 81       	ld	r25, Z
    22f6:	80 e3       	ldi	r24, 0x30	; 48
    22f8:	89 27       	eor	r24, r25
    22fa:	8c 93       	st	X, r24
			last_button_state = 1; //Update the last button state
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	80 93 77 00 	sts	0x0077, r24
    2302:	02 c0       	rjmp	.+4      	; 0x2308 <Toggle_LED+0x128>
		}
	}
	else
	{
		last_button_state = 0; //Update the button state when it's released
    2304:	10 92 77 00 	sts	0x0077, r1
	}

}
    2308:	2e 96       	adiw	r28, 0x0e	; 14
    230a:	0f b6       	in	r0, 0x3f	; 63
    230c:	f8 94       	cli
    230e:	de bf       	out	0x3e, r29	; 62
    2310:	0f be       	out	0x3f, r0	; 63
    2312:	cd bf       	out	0x3d, r28	; 61
    2314:	cf 91       	pop	r28
    2316:	df 91       	pop	r29
    2318:	08 95       	ret

0000231a <main>:

int main(void)
{
    231a:	df 93       	push	r29
    231c:	cf 93       	push	r28
    231e:	cd b7       	in	r28, 0x3d	; 61
    2320:	de b7       	in	r29, 0x3e	; 62
	SREG |= (1<<7); //Enable global interrupt
    2322:	af e5       	ldi	r26, 0x5F	; 95
    2324:	b0 e0       	ldi	r27, 0x00	; 0
    2326:	ef e5       	ldi	r30, 0x5F	; 95
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	80 81       	ld	r24, Z
    232c:	80 68       	ori	r24, 0x80	; 128
    232e:	8c 93       	st	X, r24
	/*Calling Function*/
	Define_Port();
    2330:	0e 94 de 09 	call	0x13bc	; 0x13bc <Define_Port>
	Timer1_CTC();
    2334:	0e 94 c1 09 	call	0x1382	; 0x1382 <Timer1_CTC>
	Interrupt0();
    2338:	0e 94 b0 0a 	call	0x1560	; 0x1560 <Interrupt0>
	Interrupt1();
    233c:	0e 94 c5 0a 	call	0x158a	; 0x158a <Interrupt1>
	Interrupt2();
    2340:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <Interrupt2>
	while(1)
	{
		/*Calling Function*/
		Display();
    2344:	0e 94 48 06 	call	0xc90	; 0xc90 <Display>
		Toggle();
    2348:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <Toggle>
		Toggle_LED();
    234c:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <Toggle_LED>
		Hours_Increment();
    2350:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <Hours_Increment>
		Hours_Decrement();
    2354:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <Hours_Decrement>
		Minutes_Increment();
    2358:	0e 94 a6 0b 	call	0x174c	; 0x174c <Minutes_Increment>
		Minutes_Decrement();
    235c:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <Minutes_Decrement>
		Seconds_Increment();
    2360:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <Seconds_Increment>
		Seconds_Decrement();
    2364:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <Seconds_Decrement>
    2368:	ed cf       	rjmp	.-38     	; 0x2344 <main+0x2a>

0000236a <__prologue_saves__>:
    236a:	2f 92       	push	r2
    236c:	3f 92       	push	r3
    236e:	4f 92       	push	r4
    2370:	5f 92       	push	r5
    2372:	6f 92       	push	r6
    2374:	7f 92       	push	r7
    2376:	8f 92       	push	r8
    2378:	9f 92       	push	r9
    237a:	af 92       	push	r10
    237c:	bf 92       	push	r11
    237e:	cf 92       	push	r12
    2380:	df 92       	push	r13
    2382:	ef 92       	push	r14
    2384:	ff 92       	push	r15
    2386:	0f 93       	push	r16
    2388:	1f 93       	push	r17
    238a:	cf 93       	push	r28
    238c:	df 93       	push	r29
    238e:	cd b7       	in	r28, 0x3d	; 61
    2390:	de b7       	in	r29, 0x3e	; 62
    2392:	ca 1b       	sub	r28, r26
    2394:	db 0b       	sbc	r29, r27
    2396:	0f b6       	in	r0, 0x3f	; 63
    2398:	f8 94       	cli
    239a:	de bf       	out	0x3e, r29	; 62
    239c:	0f be       	out	0x3f, r0	; 63
    239e:	cd bf       	out	0x3d, r28	; 61
    23a0:	09 94       	ijmp

000023a2 <__epilogue_restores__>:
    23a2:	2a 88       	ldd	r2, Y+18	; 0x12
    23a4:	39 88       	ldd	r3, Y+17	; 0x11
    23a6:	48 88       	ldd	r4, Y+16	; 0x10
    23a8:	5f 84       	ldd	r5, Y+15	; 0x0f
    23aa:	6e 84       	ldd	r6, Y+14	; 0x0e
    23ac:	7d 84       	ldd	r7, Y+13	; 0x0d
    23ae:	8c 84       	ldd	r8, Y+12	; 0x0c
    23b0:	9b 84       	ldd	r9, Y+11	; 0x0b
    23b2:	aa 84       	ldd	r10, Y+10	; 0x0a
    23b4:	b9 84       	ldd	r11, Y+9	; 0x09
    23b6:	c8 84       	ldd	r12, Y+8	; 0x08
    23b8:	df 80       	ldd	r13, Y+7	; 0x07
    23ba:	ee 80       	ldd	r14, Y+6	; 0x06
    23bc:	fd 80       	ldd	r15, Y+5	; 0x05
    23be:	0c 81       	ldd	r16, Y+4	; 0x04
    23c0:	1b 81       	ldd	r17, Y+3	; 0x03
    23c2:	aa 81       	ldd	r26, Y+2	; 0x02
    23c4:	b9 81       	ldd	r27, Y+1	; 0x01
    23c6:	ce 0f       	add	r28, r30
    23c8:	d1 1d       	adc	r29, r1
    23ca:	0f b6       	in	r0, 0x3f	; 63
    23cc:	f8 94       	cli
    23ce:	de bf       	out	0x3e, r29	; 62
    23d0:	0f be       	out	0x3f, r0	; 63
    23d2:	cd bf       	out	0x3d, r28	; 61
    23d4:	ed 01       	movw	r28, r26
    23d6:	08 95       	ret

000023d8 <_exit>:
    23d8:	f8 94       	cli

000023da <__stop_program>:
    23da:	ff cf       	rjmp	.-2      	; 0x23da <__stop_program>
